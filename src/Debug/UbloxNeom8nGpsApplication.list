
UbloxNeom8nGpsApplication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004804  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049ec  080049ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049f4  080049f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049fc  080049fc  000149fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  2000000c  08004a0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  08004a0c  00020608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1eb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2c  00000000  00000000  0002a227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  0002bc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  0002c478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026036  00000000  00000000  0002cc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096b3  00000000  00000000  00052c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e589c  00000000  00000000  0005c2e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141b85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002120  00000000  00000000  00141bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080049b4 	.word	0x080049b4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080049b4 	.word	0x080049b4

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295
 8000884:	f04f 30ff 	movne.w	r0, #4294967295
 8000888:	f000 b96e 	b.w	8000b68 <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9d08      	ldr	r5, [sp, #32]
 80008aa:	4604      	mov	r4, r0
 80008ac:	468c      	mov	ip, r1
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	f040 8083 	bne.w	80009ba <__udivmoddi4+0x116>
 80008b4:	428a      	cmp	r2, r1
 80008b6:	4617      	mov	r7, r2
 80008b8:	d947      	bls.n	800094a <__udivmoddi4+0xa6>
 80008ba:	fab2 f282 	clz	r2, r2
 80008be:	b142      	cbz	r2, 80008d2 <__udivmoddi4+0x2e>
 80008c0:	f1c2 0020 	rsb	r0, r2, #32
 80008c4:	fa24 f000 	lsr.w	r0, r4, r0
 80008c8:	4091      	lsls	r1, r2
 80008ca:	4097      	lsls	r7, r2
 80008cc:	ea40 0c01 	orr.w	ip, r0, r1
 80008d0:	4094      	lsls	r4, r2
 80008d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008d6:	0c23      	lsrs	r3, r4, #16
 80008d8:	fbbc f6f8 	udiv	r6, ip, r8
 80008dc:	fa1f fe87 	uxth.w	lr, r7
 80008e0:	fb08 c116 	mls	r1, r8, r6, ip
 80008e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008e8:	fb06 f10e 	mul.w	r1, r6, lr
 80008ec:	4299      	cmp	r1, r3
 80008ee:	d909      	bls.n	8000904 <__udivmoddi4+0x60>
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008f6:	f080 8119 	bcs.w	8000b2c <__udivmoddi4+0x288>
 80008fa:	4299      	cmp	r1, r3
 80008fc:	f240 8116 	bls.w	8000b2c <__udivmoddi4+0x288>
 8000900:	3e02      	subs	r6, #2
 8000902:	443b      	add	r3, r7
 8000904:	1a5b      	subs	r3, r3, r1
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb3 f0f8 	udiv	r0, r3, r8
 800090c:	fb08 3310 	mls	r3, r8, r0, r3
 8000910:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000914:	fb00 fe0e 	mul.w	lr, r0, lr
 8000918:	45a6      	cmp	lr, r4
 800091a:	d909      	bls.n	8000930 <__udivmoddi4+0x8c>
 800091c:	193c      	adds	r4, r7, r4
 800091e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000922:	f080 8105 	bcs.w	8000b30 <__udivmoddi4+0x28c>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f240 8102 	bls.w	8000b30 <__udivmoddi4+0x28c>
 800092c:	3802      	subs	r0, #2
 800092e:	443c      	add	r4, r7
 8000930:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000934:	eba4 040e 	sub.w	r4, r4, lr
 8000938:	2600      	movs	r6, #0
 800093a:	b11d      	cbz	r5, 8000944 <__udivmoddi4+0xa0>
 800093c:	40d4      	lsrs	r4, r2
 800093e:	2300      	movs	r3, #0
 8000940:	e9c5 4300 	strd	r4, r3, [r5]
 8000944:	4631      	mov	r1, r6
 8000946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094a:	b902      	cbnz	r2, 800094e <__udivmoddi4+0xaa>
 800094c:	deff      	udf	#255	; 0xff
 800094e:	fab2 f282 	clz	r2, r2
 8000952:	2a00      	cmp	r2, #0
 8000954:	d150      	bne.n	80009f8 <__udivmoddi4+0x154>
 8000956:	1bcb      	subs	r3, r1, r7
 8000958:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800095c:	fa1f f887 	uxth.w	r8, r7
 8000960:	2601      	movs	r6, #1
 8000962:	fbb3 fcfe 	udiv	ip, r3, lr
 8000966:	0c21      	lsrs	r1, r4, #16
 8000968:	fb0e 331c 	mls	r3, lr, ip, r3
 800096c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000970:	fb08 f30c 	mul.w	r3, r8, ip
 8000974:	428b      	cmp	r3, r1
 8000976:	d907      	bls.n	8000988 <__udivmoddi4+0xe4>
 8000978:	1879      	adds	r1, r7, r1
 800097a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800097e:	d202      	bcs.n	8000986 <__udivmoddi4+0xe2>
 8000980:	428b      	cmp	r3, r1
 8000982:	f200 80e9 	bhi.w	8000b58 <__udivmoddi4+0x2b4>
 8000986:	4684      	mov	ip, r0
 8000988:	1ac9      	subs	r1, r1, r3
 800098a:	b2a3      	uxth	r3, r4
 800098c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000990:	fb0e 1110 	mls	r1, lr, r0, r1
 8000994:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000998:	fb08 f800 	mul.w	r8, r8, r0
 800099c:	45a0      	cmp	r8, r4
 800099e:	d907      	bls.n	80009b0 <__udivmoddi4+0x10c>
 80009a0:	193c      	adds	r4, r7, r4
 80009a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x10a>
 80009a8:	45a0      	cmp	r8, r4
 80009aa:	f200 80d9 	bhi.w	8000b60 <__udivmoddi4+0x2bc>
 80009ae:	4618      	mov	r0, r3
 80009b0:	eba4 0408 	sub.w	r4, r4, r8
 80009b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009b8:	e7bf      	b.n	800093a <__udivmoddi4+0x96>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d909      	bls.n	80009d2 <__udivmoddi4+0x12e>
 80009be:	2d00      	cmp	r5, #0
 80009c0:	f000 80b1 	beq.w	8000b26 <__udivmoddi4+0x282>
 80009c4:	2600      	movs	r6, #0
 80009c6:	e9c5 0100 	strd	r0, r1, [r5]
 80009ca:	4630      	mov	r0, r6
 80009cc:	4631      	mov	r1, r6
 80009ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d2:	fab3 f683 	clz	r6, r3
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	d14a      	bne.n	8000a70 <__udivmoddi4+0x1cc>
 80009da:	428b      	cmp	r3, r1
 80009dc:	d302      	bcc.n	80009e4 <__udivmoddi4+0x140>
 80009de:	4282      	cmp	r2, r0
 80009e0:	f200 80b8 	bhi.w	8000b54 <__udivmoddi4+0x2b0>
 80009e4:	1a84      	subs	r4, r0, r2
 80009e6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ea:	2001      	movs	r0, #1
 80009ec:	468c      	mov	ip, r1
 80009ee:	2d00      	cmp	r5, #0
 80009f0:	d0a8      	beq.n	8000944 <__udivmoddi4+0xa0>
 80009f2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009f6:	e7a5      	b.n	8000944 <__udivmoddi4+0xa0>
 80009f8:	f1c2 0320 	rsb	r3, r2, #32
 80009fc:	fa20 f603 	lsr.w	r6, r0, r3
 8000a00:	4097      	lsls	r7, r2
 8000a02:	fa01 f002 	lsl.w	r0, r1, r2
 8000a06:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a0a:	40d9      	lsrs	r1, r3
 8000a0c:	4330      	orrs	r0, r6
 8000a0e:	0c03      	lsrs	r3, r0, #16
 8000a10:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a14:	fa1f f887 	uxth.w	r8, r7
 8000a18:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a20:	fb06 f108 	mul.w	r1, r6, r8
 8000a24:	4299      	cmp	r1, r3
 8000a26:	fa04 f402 	lsl.w	r4, r4, r2
 8000a2a:	d909      	bls.n	8000a40 <__udivmoddi4+0x19c>
 8000a2c:	18fb      	adds	r3, r7, r3
 8000a2e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a32:	f080 808d 	bcs.w	8000b50 <__udivmoddi4+0x2ac>
 8000a36:	4299      	cmp	r1, r3
 8000a38:	f240 808a 	bls.w	8000b50 <__udivmoddi4+0x2ac>
 8000a3c:	3e02      	subs	r6, #2
 8000a3e:	443b      	add	r3, r7
 8000a40:	1a5b      	subs	r3, r3, r1
 8000a42:	b281      	uxth	r1, r0
 8000a44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a50:	fb00 f308 	mul.w	r3, r0, r8
 8000a54:	428b      	cmp	r3, r1
 8000a56:	d907      	bls.n	8000a68 <__udivmoddi4+0x1c4>
 8000a58:	1879      	adds	r1, r7, r1
 8000a5a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a5e:	d273      	bcs.n	8000b48 <__udivmoddi4+0x2a4>
 8000a60:	428b      	cmp	r3, r1
 8000a62:	d971      	bls.n	8000b48 <__udivmoddi4+0x2a4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	4439      	add	r1, r7
 8000a68:	1acb      	subs	r3, r1, r3
 8000a6a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a6e:	e778      	b.n	8000962 <__udivmoddi4+0xbe>
 8000a70:	f1c6 0c20 	rsb	ip, r6, #32
 8000a74:	fa03 f406 	lsl.w	r4, r3, r6
 8000a78:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a7c:	431c      	orrs	r4, r3
 8000a7e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a82:	fa01 f306 	lsl.w	r3, r1, r6
 8000a86:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a8a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a8e:	431f      	orrs	r7, r3
 8000a90:	0c3b      	lsrs	r3, r7, #16
 8000a92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a96:	fa1f f884 	uxth.w	r8, r4
 8000a9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a9e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aa2:	fb09 fa08 	mul.w	sl, r9, r8
 8000aa6:	458a      	cmp	sl, r1
 8000aa8:	fa02 f206 	lsl.w	r2, r2, r6
 8000aac:	fa00 f306 	lsl.w	r3, r0, r6
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x220>
 8000ab2:	1861      	adds	r1, r4, r1
 8000ab4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ab8:	d248      	bcs.n	8000b4c <__udivmoddi4+0x2a8>
 8000aba:	458a      	cmp	sl, r1
 8000abc:	d946      	bls.n	8000b4c <__udivmoddi4+0x2a8>
 8000abe:	f1a9 0902 	sub.w	r9, r9, #2
 8000ac2:	4421      	add	r1, r4
 8000ac4:	eba1 010a 	sub.w	r1, r1, sl
 8000ac8:	b2bf      	uxth	r7, r7
 8000aca:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ace:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ad2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ad6:	fb00 f808 	mul.w	r8, r0, r8
 8000ada:	45b8      	cmp	r8, r7
 8000adc:	d907      	bls.n	8000aee <__udivmoddi4+0x24a>
 8000ade:	19e7      	adds	r7, r4, r7
 8000ae0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ae4:	d22e      	bcs.n	8000b44 <__udivmoddi4+0x2a0>
 8000ae6:	45b8      	cmp	r8, r7
 8000ae8:	d92c      	bls.n	8000b44 <__udivmoddi4+0x2a0>
 8000aea:	3802      	subs	r0, #2
 8000aec:	4427      	add	r7, r4
 8000aee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000af2:	eba7 0708 	sub.w	r7, r7, r8
 8000af6:	fba0 8902 	umull	r8, r9, r0, r2
 8000afa:	454f      	cmp	r7, r9
 8000afc:	46c6      	mov	lr, r8
 8000afe:	4649      	mov	r1, r9
 8000b00:	d31a      	bcc.n	8000b38 <__udivmoddi4+0x294>
 8000b02:	d017      	beq.n	8000b34 <__udivmoddi4+0x290>
 8000b04:	b15d      	cbz	r5, 8000b1e <__udivmoddi4+0x27a>
 8000b06:	ebb3 020e 	subs.w	r2, r3, lr
 8000b0a:	eb67 0701 	sbc.w	r7, r7, r1
 8000b0e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b12:	40f2      	lsrs	r2, r6
 8000b14:	ea4c 0202 	orr.w	r2, ip, r2
 8000b18:	40f7      	lsrs	r7, r6
 8000b1a:	e9c5 2700 	strd	r2, r7, [r5]
 8000b1e:	2600      	movs	r6, #0
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	462e      	mov	r6, r5
 8000b28:	4628      	mov	r0, r5
 8000b2a:	e70b      	b.n	8000944 <__udivmoddi4+0xa0>
 8000b2c:	4606      	mov	r6, r0
 8000b2e:	e6e9      	b.n	8000904 <__udivmoddi4+0x60>
 8000b30:	4618      	mov	r0, r3
 8000b32:	e6fd      	b.n	8000930 <__udivmoddi4+0x8c>
 8000b34:	4543      	cmp	r3, r8
 8000b36:	d2e5      	bcs.n	8000b04 <__udivmoddi4+0x260>
 8000b38:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b3c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b40:	3801      	subs	r0, #1
 8000b42:	e7df      	b.n	8000b04 <__udivmoddi4+0x260>
 8000b44:	4608      	mov	r0, r1
 8000b46:	e7d2      	b.n	8000aee <__udivmoddi4+0x24a>
 8000b48:	4660      	mov	r0, ip
 8000b4a:	e78d      	b.n	8000a68 <__udivmoddi4+0x1c4>
 8000b4c:	4681      	mov	r9, r0
 8000b4e:	e7b9      	b.n	8000ac4 <__udivmoddi4+0x220>
 8000b50:	4666      	mov	r6, ip
 8000b52:	e775      	b.n	8000a40 <__udivmoddi4+0x19c>
 8000b54:	4630      	mov	r0, r6
 8000b56:	e74a      	b.n	80009ee <__udivmoddi4+0x14a>
 8000b58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b5c:	4439      	add	r1, r7
 8000b5e:	e713      	b.n	8000988 <__udivmoddi4+0xe4>
 8000b60:	3802      	subs	r0, #2
 8000b62:	443c      	add	r4, r7
 8000b64:	e724      	b.n	80009b0 <__udivmoddi4+0x10c>
 8000b66:	bf00      	nop

08000b68 <__aeabi_idiv0>:
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <_ZN28ublox_neo_m8n_gps_parametersC1EP20__UART_HandleTypeDef>:

public:

	ubx_nav_pvt_package_s nav_pvt_pavkage_st;

	ublox_neo_m8n_gps_parameters(UART_HandleTypeDef *uart) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]

		this->uartType = uart; // assign uart
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	601a      	str	r2, [r3, #0]
		memset(this->recevied_data_dma_u8, 0, CAPTURE_PACKAGE_SIZE); // clear received msg array
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3304      	adds	r3, #4
 8000b80:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f003 ff0c 	bl	80049a4 <memset>

		/////////////////////////////////////////////////////
		// UBX-NAV-PVT msg initial value assign

		this->nav_pvt_pavkage_st.latitude = 0;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8000b92:	f04f 0200 	mov.w	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
		this->nav_pvt_pavkage_st.longitude = 0;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8000b9e:	f04f 0200 	mov.w	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
		this->nav_pvt_pavkage_st.height_above_ellipsoid = 0;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f203 4364 	addw	r3, r3, #1124	; 0x464
 8000baa:	f04f 0200 	mov.w	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
		this->nav_pvt_pavkage_st.height_above_mean_sea = 0;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8000bb6:	f04f 0200 	mov.w	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]

		this->nav_pvt_pavkage_st.year_u16 = 0;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
		this->nav_pvt_pavkage_st.month_u8 = 0;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
		this->nav_pvt_pavkage_st.day_u8 = 0;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 246f 	strb.w	r2, [r3, #1135]	; 0x46f
		this->nav_pvt_pavkage_st.hour_u8 = 0;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
		this->nav_pvt_pavkage_st.min_u8 = 0;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
		this->nav_pvt_pavkage_st.second_u8 = 0;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 2472 	strb.w	r2, [r3, #1138]	; 0x472

		this->nav_pvt_pavkage_st.fix_type_u8 = 0;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 2473 	strb.w	r2, [r3, #1139]	; 0x473
		/////////////////////////////////////////////////////

		/////////////////////////////////////////////////////
		// Assign initial value state machine parameters

		this->capture_status_u8 = HEADER_CAPTURE_FIRST;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

		memset(this->data_array_u8, 0, CAPTURE_PACKAGE_SIZE);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8000c02:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f003 fecb 	bl	80049a4 <memset>
		this->data_counter_u16 = 0;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	f8a3 23ee 	strh.w	r2, [r3, #1006]	; 0x3ee

		this->package_class_u8 = 0;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
		this->package_id_u8 = 0;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
		this->payload_size_u8 = 0;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

		memset(this->payload_array_u8, 0, PAYLOAD_SIZE);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f203 33f3 	addw	r3, r3, #1011	; 0x3f3
 8000c34:	2264      	movs	r2, #100	; 0x64
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f003 feb3 	bl	80049a4 <memset>

		this->CK_A_u8 = 0;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
		this->CK_B_u8 = 0;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458

		this->calculated_CK_A_u8 = 0;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
		this->calculated_CK_B_u8 = 0;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a

		// Assign initial value state machine parameters
		/////////////////////////////////////////////////////

	}
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv>:

	///////////////////////////////////////////////////////////
	// Parse gps message with State Machine Algorithm

	void get_gps_message() {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

		for (int i = 0; i < CAPTURE_PACKAGE_SIZE; i++) {
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c7a:	f280 819d 	bge.w	8000fb8 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x350>

			switch (this->capture_status_u8) {
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8000c84:	3b01      	subs	r3, #1
 8000c86:	2b07      	cmp	r3, #7
 8000c88:	f200 818a 	bhi.w	8000fa0 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x338>
 8000c8c:	a201      	add	r2, pc, #4	; (adr r2, 8000c94 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x2c>)
 8000c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c92:	bf00      	nop
 8000c94:	08000cb5 	.word	0x08000cb5
 8000c98:	08000d09 	.word	0x08000d09
 8000c9c:	08000d5d 	.word	0x08000d5d
 8000ca0:	08000da7 	.word	0x08000da7
 8000ca4:	08000df1 	.word	0x08000df1
 8000ca8:	08000e63 	.word	0x08000e63
 8000cac:	08000eb3 	.word	0x08000eb3
 8000cb0:	08000ecd 	.word	0x08000ecd

			case HEADER_CAPTURE_FIRST: {

				if (this->recevied_data_dma_u8[i] == HEADER_INIT) {
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4413      	add	r3, r2
 8000cba:	3304      	adds	r3, #4
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2bb5      	cmp	r3, #181	; 0xb5
 8000cc0:	d119      	bne.n	8000cf6 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x8e>

					this->data_array_u8[this->data_counter_u16] =
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f8b3 33ee 	ldrh.w	r3, [r3, #1006]	; 0x3ee
 8000cc8:	4619      	mov	r1, r3
							this->recevied_data_dma_u8[i];
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	781a      	ldrb	r2, [r3, #0]
					this->data_array_u8[this->data_counter_u16] =
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

					this->data_counter_u16++;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f8b3 33ee 	ldrh.w	r3, [r3, #1006]	; 0x3ee
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f8a3 23ee 	strh.w	r2, [r3, #1006]	; 0x3ee
					this->capture_status_u8 = HEADER_CAPTURE_SECOND;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2202      	movs	r2, #2
 8000cf0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
					this->capture_status_u8 = HEADER_CAPTURE_FIRST;
					this->data_counter_u16 = 0;

				}

				break;
 8000cf4:	e15c      	b.n	8000fb0 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x348>
					this->capture_status_u8 = HEADER_CAPTURE_FIRST;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
					this->data_counter_u16 = 0;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	f8a3 23ee 	strh.w	r2, [r3, #1006]	; 0x3ee
				break;
 8000d06:	e153      	b.n	8000fb0 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x348>
			}

			case HEADER_CAPTURE_SECOND: {

				if (this->recevied_data_dma_u8[i] == HEADER_SECOND) {
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	3304      	adds	r3, #4
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b62      	cmp	r3, #98	; 0x62
 8000d14:	d119      	bne.n	8000d4a <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0xe2>

					this->data_array_u8[this->data_counter_u16] =
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f8b3 33ee 	ldrh.w	r3, [r3, #1006]	; 0x3ee
 8000d1c:	4619      	mov	r1, r3
							this->recevied_data_dma_u8[i];
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	3304      	adds	r3, #4
 8000d26:	781a      	ldrb	r2, [r3, #0]
					this->data_array_u8[this->data_counter_u16] =
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

					this->data_counter_u16++;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f8b3 33ee 	ldrh.w	r3, [r3, #1006]	; 0x3ee
 8000d36:	3301      	adds	r3, #1
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f8a3 23ee 	strh.w	r2, [r3, #1006]	; 0x3ee
					this->capture_status_u8 = CLASS_CAPTURE;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2203      	movs	r2, #3
 8000d44:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
					this->capture_status_u8 = HEADER_CAPTURE_FIRST;
					this->data_counter_u16 = 0;

				}

				break;
 8000d48:	e132      	b.n	8000fb0 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x348>
					this->capture_status_u8 = HEADER_CAPTURE_FIRST;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
					this->data_counter_u16 = 0;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2200      	movs	r2, #0
 8000d56:	f8a3 23ee 	strh.w	r2, [r3, #1006]	; 0x3ee
				break;
 8000d5a:	e129      	b.n	8000fb0 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x348>
			}

			case CLASS_CAPTURE: {

				this->data_array_u8[this->data_counter_u16] =
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f8b3 33ee 	ldrh.w	r3, [r3, #1006]	; 0x3ee
 8000d62:	4619      	mov	r1, r3
						this->recevied_data_dma_u8[i];
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	4413      	add	r3, r2
 8000d6a:	3304      	adds	r3, #4
 8000d6c:	781a      	ldrb	r2, [r3, #0]
				this->data_array_u8[this->data_counter_u16] =
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	440b      	add	r3, r1
 8000d72:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

				this->package_class_u8 =
						this->data_array_u8[this->data_counter_u16];
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f8b3 33ee 	ldrh.w	r3, [r3, #1006]	; 0x3ee
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	f893 21f9 	ldrb.w	r2, [r3, #505]	; 0x1f9
				this->package_class_u8 =
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0

				this->data_counter_u16++;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f8b3 33ee 	ldrh.w	r3, [r3, #1006]	; 0x3ee
 8000d92:	3301      	adds	r3, #1
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f8a3 23ee 	strh.w	r2, [r3, #1006]	; 0x3ee
				this->capture_status_u8 = ID_CAPTURE;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2204      	movs	r2, #4
 8000da0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

				break;
 8000da4:	e104      	b.n	8000fb0 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x348>
			}

			case ID_CAPTURE: {

				this->data_array_u8[this->data_counter_u16] =
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f8b3 33ee 	ldrh.w	r3, [r3, #1006]	; 0x3ee
 8000dac:	4619      	mov	r1, r3
						this->recevied_data_dma_u8[i];
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4413      	add	r3, r2
 8000db4:	3304      	adds	r3, #4
 8000db6:	781a      	ldrb	r2, [r3, #0]
				this->data_array_u8[this->data_counter_u16] =
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

				this->package_id_u8 =
						this->data_array_u8[this->data_counter_u16];
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f8b3 33ee 	ldrh.w	r3, [r3, #1006]	; 0x3ee
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4413      	add	r3, r2
 8000dcc:	f893 21f9 	ldrb.w	r2, [r3, #505]	; 0x1f9
				this->package_id_u8 =
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1

				this->data_counter_u16++;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f8b3 33ee 	ldrh.w	r3, [r3, #1006]	; 0x3ee
 8000ddc:	3301      	adds	r3, #1
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f8a3 23ee 	strh.w	r2, [r3, #1006]	; 0x3ee
				this->capture_status_u8 = LENGTH_CAPTURE;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2205      	movs	r2, #5
 8000dea:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

				break;
 8000dee:	e0df      	b.n	8000fb0 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x348>
			}

			case LENGTH_CAPTURE: {

				this->data_array_u8[this->data_counter_u16] =
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f8b3 33ee 	ldrh.w	r3, [r3, #1006]	; 0x3ee
 8000df6:	4619      	mov	r1, r3
						this->recevied_data_dma_u8[i];
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3304      	adds	r3, #4
 8000e00:	781a      	ldrb	r2, [r3, #0]
				this->data_array_u8[this->data_counter_u16] =
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	440b      	add	r3, r1
 8000e06:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

				this->data_counter_u16++;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f8b3 33ee 	ldrh.w	r3, [r3, #1006]	; 0x3ee
 8000e10:	3301      	adds	r3, #1
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f8a3 23ee 	strh.w	r2, [r3, #1006]	; 0x3ee
				if (this->data_counter_u16 > 5) {
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f8b3 33ee 	ldrh.w	r3, [r3, #1006]	; 0x3ee
 8000e20:	2b05      	cmp	r3, #5
 8000e22:	f240 80c2 	bls.w	8000faa <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x342>

					this->payload_size_u8 =
							(this->data_array_u8[this->data_counter_u16 - 1]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f8b3 33ee 	ldrh.w	r3, [r3, #1006]	; 0x3ee
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
									<< 8
 8000e36:	021b      	lsls	r3, r3, #8
									| this->data_array_u8[this->data_counter_u16
 8000e38:	b25a      	sxtb	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f8b3 33ee 	ldrh.w	r3, [r3, #1006]	; 0x3ee
											- 2]);
 8000e40:	3b02      	subs	r3, #2
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	440b      	add	r3, r1
 8000e46:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8000e4a:	b25b      	sxtb	r3, r3
									| this->data_array_u8[this->data_counter_u16
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	b25b      	sxtb	r3, r3
 8000e50:	b2da      	uxtb	r2, r3
					this->payload_size_u8 =
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
					this->capture_status_u8 = PAYLOAD_CAPTURE;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2206      	movs	r2, #6
 8000e5c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

				}

				break;
 8000e60:	e0a3      	b.n	8000faa <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x342>
			}

			case PAYLOAD_CAPTURE: {

				this->data_array_u8[this->data_counter_u16] =
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f8b3 33ee 	ldrh.w	r3, [r3, #1006]	; 0x3ee
 8000e68:	4619      	mov	r1, r3
						this->recevied_data_dma_u8[i];
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	3304      	adds	r3, #4
 8000e72:	781a      	ldrb	r2, [r3, #0]
				this->data_array_u8[this->data_counter_u16] =
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	440b      	add	r3, r1
 8000e78:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9

				this->data_counter_u16++;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f8b3 33ee 	ldrh.w	r3, [r3, #1006]	; 0x3ee
 8000e82:	3301      	adds	r3, #1
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f8a3 23ee 	strh.w	r2, [r3, #1006]	; 0x3ee

				if (this->data_counter_u16 >= (this->payload_size_u8 + 6)) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f893 33f2 	ldrb.w	r3, [r3, #1010]	; 0x3f2
 8000e92:	3305      	adds	r3, #5
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	f8b2 23ee 	ldrh.w	r2, [r2, #1006]	; 0x3ee
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	f280 8087 	bge.w	8000fae <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x346>

					this->data_counter_u16 = 0;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f8a3 23ee 	strh.w	r2, [r3, #1006]	; 0x3ee
					this->capture_status_u8 = CHECKSUM_A_CAPTURE;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2207      	movs	r2, #7
 8000eac:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
				}

				break;
 8000eb0:	e07d      	b.n	8000fae <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x346>
			}

			case CHECKSUM_A_CAPTURE: {

				this->CK_A_u8 = this->recevied_data_dma_u8[i];
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	3304      	adds	r3, #4
 8000eba:	781a      	ldrb	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457

				this->capture_status_u8 = CHECKSUM_B_CAPTURE;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2208      	movs	r2, #8
 8000ec6:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8

				break;
 8000eca:	e071      	b.n	8000fb0 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x348>
			}

			case CHECKSUM_B_CAPTURE: {

				this->CK_B_u8 = this->recevied_data_dma_u8[i];
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	781a      	ldrb	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
				this->recevied_data_dma_u8[i] = 0;
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]

				this->calculate_checksum_value(this->data_array_u8,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f203 11f9 	addw	r1, r3, #505	; 0x1f9
						(payload_size_u8 + 6));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f893 33f2 	ldrb.w	r3, [r3, #1010]	; 0x3f2
				this->calculate_checksum_value(this->data_array_u8,
 8000ef4:	3306      	adds	r3, #6
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f958 	bl	80011b0 <_ZN28ublox_neo_m8n_gps_parameters24calculate_checksum_valueEPhh>

				if (this->CK_A_u8 == calculated_CK_A_u8
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f893 2457 	ldrb.w	r2, [r3, #1111]	; 0x457
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 3459 	ldrb.w	r3, [r3, #1113]	; 0x459
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d129      	bne.n	8000f64 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x2fc>
						&& this->CK_B_u8 == this->calculated_CK_B_u8) {
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f893 2458 	ldrb.w	r2, [r3, #1112]	; 0x458
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 345a 	ldrb.w	r3, [r3, #1114]	; 0x45a
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d121      	bne.n	8000f64 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x2fc>

					this->capture_status_u8 = HEADER_CAPTURE_FIRST;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
					this->data_counter_u16 = 0;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f8a3 23ee 	strh.w	r2, [r3, #1006]	; 0x3ee

					this->execute_nav_class_packages();
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f845 	bl	8000fc0 <_ZN28ublox_neo_m8n_gps_parameters26execute_nav_class_packagesEv>

					memcpy(this->payload_array_u8, (this->data_array_u8 + 6),
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f203 30f3 	addw	r0, r3, #1011	; 0x3f3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8000f42:	1d99      	adds	r1, r3, #6
							this->payload_size_u8);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 33f2 	ldrb.w	r3, [r3, #1010]	; 0x3f2
					memcpy(this->payload_array_u8, (this->data_array_u8 + 6),
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	f003 fd1c 	bl	8004988 <memcpy>
					memset(this->data_array_u8, 0, CAPTURE_PACKAGE_SIZE);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8000f56:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 fd21 	bl	80049a4 <memset>
					memset(this->data_array_u8, 0, CAPTURE_PACKAGE_SIZE);
					this->data_counter_u16 = 0;

				}

				break;
 8000f62:	e025      	b.n	8000fb0 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x348>
					this->capture_status_u8 = HEADER_CAPTURE_FIRST;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
					this->package_class_u8 = 0;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
					this->package_id_u8 = 0;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
					this->payload_size_u8 = 0;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
					memset(this->data_array_u8, 0, CAPTURE_PACKAGE_SIZE);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8000f8a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f003 fd07 	bl	80049a4 <memset>
					this->data_counter_u16 = 0;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f8a3 23ee 	strh.w	r2, [r3, #1006]	; 0x3ee
				break;
 8000f9e:	e007      	b.n	8000fb0 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x348>
			}

			default:
				this->capture_status_u8 = HEADER_CAPTURE_FIRST;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
				break;
 8000fa8:	e002      	b.n	8000fb0 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x348>
				break;
 8000faa:	bf00      	nop
 8000fac:	e000      	b.n	8000fb0 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0x348>
				break;
 8000fae:	bf00      	nop
		for (int i = 0; i < CAPTURE_PACKAGE_SIZE; i++) {
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	e65d      	b.n	8000c74 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv+0xc>

			} // switch

		} // for

	} // function
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_ZN28ublox_neo_m8n_gps_parameters26execute_nav_class_packagesEv>:
	// Parse gps message with State Machine Algorithm
	///////////////////////////////////////////////////////////



	void execute_nav_class_packages() {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

		switch (this->package_id_u8) {
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 33f1 	ldrb.w	r3, [r3, #1009]	; 0x3f1
 8000fce:	2b07      	cmp	r3, #7
 8000fd0:	d103      	bne.n	8000fda <_ZN28ublox_neo_m8n_gps_parameters26execute_nav_class_packagesEv+0x1a>

		case (PVT_MSG_ID): {
			this->execute_pvt_package();
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f810 	bl	8000ff8 <_ZN28ublox_neo_m8n_gps_parameters19execute_pvt_packageEv>
			break;
 8000fd8:	e008      	b.n	8000fec <_ZN28ublox_neo_m8n_gps_parameters26execute_nav_class_packagesEv+0x2c>
			 * 	break;
			 * }
			 */

		default:
			memset(this->payload_array_u8, 0 , PAYLOAD_SIZE);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f203 33f3 	addw	r3, r3, #1011	; 0x3f3
 8000fe0:	2264      	movs	r2, #100	; 0x64
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f003 fcdd 	bl	80049a4 <memset>
			break;
 8000fea:	bf00      	nop

		}

	}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	0000      	movs	r0, r0
	...

08000ff8 <_ZN28ublox_neo_m8n_gps_parameters19execute_pvt_packageEv>:

	void execute_pvt_package() {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
		/* PVT Message Structure :
		 * [0xB5][0x62][0x01][0x07][92 bytes][Payload][CK_A][CK_B]
		 */

		// Year -> byte offset : 4, size: 2 bytes
		this->nav_pvt_pavkage_st.year_u16 = (this->payload_array_u8[4])
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 33f7 	ldrb.w	r3, [r3, #1015]	; 0x3f7
 8001006:	b21a      	sxth	r2, r3
				| (this->payload_array_u8[5] << 8);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 33f8 	ldrb.w	r3, [r3, #1016]	; 0x3f8
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21b      	sxth	r3, r3
 8001016:	b29a      	uxth	r2, r3
		this->nav_pvt_pavkage_st.year_u16 = (this->payload_array_u8[4])
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c

		// Month -> byte offset: 6, size : 1 byte
		this->nav_pvt_pavkage_st.month_u8 = this->payload_array_u8[6];
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 23f9 	ldrb.w	r2, [r3, #1017]	; 0x3f9
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e

		// Day -> bytes offset: 7, size: 1 byte
		this->nav_pvt_pavkage_st.day_u8 = this->payload_array_u8[7];
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 23fa 	ldrb.w	r2, [r3, #1018]	; 0x3fa
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f883 246f 	strb.w	r2, [r3, #1135]	; 0x46f

		// Hour -> bytes offset: 8, size: 1 byte
		this->nav_pvt_pavkage_st.hour_u8 = this->payload_array_u8[8];
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470

		// Minutes -> bytes offset: 9, size: 1 byte
		this->nav_pvt_pavkage_st.min_u8 = this->payload_array_u8[9];
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f893 23fc 	ldrb.w	r2, [r3, #1020]	; 0x3fc
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471

		// Seconds -> bytes offset: 10, size: 1 byte
		this->nav_pvt_pavkage_st.second_u8 = this->payload_array_u8[10];
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f893 23fd 	ldrb.w	r2, [r3, #1021]	; 0x3fd
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f883 2472 	strb.w	r2, [r3, #1138]	; 0x472

		// Fix type -> bytes offset: 20, size: 1 bytes
		this->nav_pvt_pavkage_st.fix_type_u8 = this->payload_array_u8[20];
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 2407 	ldrb.w	r2, [r3, #1031]	; 0x407
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f883 2473 	strb.w	r2, [r3, #1139]	; 0x473

		// Longitude -> bytes offset: 24, size: 4 bytes
		this->nav_pvt_pavkage_st.longitude = ((this->payload_array_u8[24])
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 340b 	ldrb.w	r3, [r3, #1035]	; 0x40b
 800106c:	461a      	mov	r2, r3
				| (this->payload_array_u8[25] << 8)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	431a      	orrs	r2, r3
				| (this->payload_array_u8[26] << 16)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 800107e:	041b      	lsls	r3, r3, #16
 8001080:	431a      	orrs	r2, r3
				| (this->payload_array_u8[27] << 24)) * 1e-7;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8001088:	061b      	lsls	r3, r3, #24
 800108a:	4313      	orrs	r3, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fb37 	bl	8000700 <__aeabi_i2d>
 8001092:	a343      	add	r3, pc, #268	; (adr r3, 80011a0 <_ZN28ublox_neo_m8n_gps_parameters19execute_pvt_packageEv+0x1a8>)
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	f7ff f8b6 	bl	8000208 <__aeabi_dmul>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fb96 	bl	80007d4 <__aeabi_d2f>
 80010a8:	4602      	mov	r2, r0
		this->nav_pvt_pavkage_st.longitude = ((this->payload_array_u8[24])
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80010b0:	601a      	str	r2, [r3, #0]

		// Latitude -> bytes offset: 28, size 4 bytes
		this->nav_pvt_pavkage_st.latitude = ((this->payload_array_u8[28])
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 340f 	ldrb.w	r3, [r3, #1039]	; 0x40f
 80010b8:	461a      	mov	r2, r3
				| (this->payload_array_u8[29] << 8)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	431a      	orrs	r2, r3
				| (this->payload_array_u8[30] << 16)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80010ca:	041b      	lsls	r3, r3, #16
 80010cc:	431a      	orrs	r2, r3
				| (this->payload_array_u8[31] << 24)) * 1e-7;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80010d4:	061b      	lsls	r3, r3, #24
 80010d6:	4313      	orrs	r3, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fb11 	bl	8000700 <__aeabi_i2d>
 80010de:	a330      	add	r3, pc, #192	; (adr r3, 80011a0 <_ZN28ublox_neo_m8n_gps_parameters19execute_pvt_packageEv+0x1a8>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	f7ff f890 	bl	8000208 <__aeabi_dmul>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	f7ff fb70 	bl	80007d4 <__aeabi_d2f>
 80010f4:	4602      	mov	r2, r0
		this->nav_pvt_pavkage_st.latitude = ((this->payload_array_u8[28])
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80010fc:	601a      	str	r2, [r3, #0]

		// Height above ellipsoid -> bytes offset: 32, size 4 bytes
		this->nav_pvt_pavkage_st.height_above_ellipsoid =
				((this->payload_array_u8[32])
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 8001104:	461a      	mov	r2, r3
						| (this->payload_array_u8[33] << 8)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	431a      	orrs	r2, r3
						| (this->payload_array_u8[34] << 16)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8001116:	041b      	lsls	r3, r3, #16
 8001118:	431a      	orrs	r2, r3
						| (this->payload_array_u8[35] << 24)) * 1e-3;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 3416 	ldrb.w	r3, [r3, #1046]	; 0x416
 8001120:	061b      	lsls	r3, r3, #24
 8001122:	4313      	orrs	r3, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff faeb 	bl	8000700 <__aeabi_i2d>
 800112a:	a31f      	add	r3, pc, #124	; (adr r3, 80011a8 <_ZN28ublox_neo_m8n_gps_parameters19execute_pvt_packageEv+0x1b0>)
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	f7ff f86a 	bl	8000208 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f7ff fb4a 	bl	80007d4 <__aeabi_d2f>
 8001140:	4602      	mov	r2, r0
		this->nav_pvt_pavkage_st.height_above_ellipsoid =
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f203 4364 	addw	r3, r3, #1124	; 0x464
 8001148:	601a      	str	r2, [r3, #0]

		// Height above mean sea level -> bytes offset: 36, size 4 bytes
		this->nav_pvt_pavkage_st.height_above_mean_sea =
				((this->payload_array_u8[36])
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3417 	ldrb.w	r3, [r3, #1047]	; 0x417
 8001150:	461a      	mov	r2, r3
						| (this->payload_array_u8[37] << 8)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	431a      	orrs	r2, r3
						| (this->payload_array_u8[38] << 16)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8001162:	041b      	lsls	r3, r3, #16
 8001164:	431a      	orrs	r2, r3
						| (this->payload_array_u8[39] << 24)) * 1e-3;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800116c:	061b      	lsls	r3, r3, #24
 800116e:	4313      	orrs	r3, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fac5 	bl	8000700 <__aeabi_i2d>
 8001176:	a30c      	add	r3, pc, #48	; (adr r3, 80011a8 <_ZN28ublox_neo_m8n_gps_parameters19execute_pvt_packageEv+0x1b0>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff f844 	bl	8000208 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fb24 	bl	80007d4 <__aeabi_d2f>
 800118c:	4602      	mov	r2, r0
		this->nav_pvt_pavkage_st.height_above_mean_sea =
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 8001194:	601a      	str	r2, [r3, #0]

	}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	9abcaf48 	.word	0x9abcaf48
 80011a4:	3e7ad7f2 	.word	0x3e7ad7f2
 80011a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80011ac:	3f50624d 	.word	0x3f50624d

080011b0 <_ZN28ublox_neo_m8n_gps_parameters24calculate_checksum_valueEPhh>:

	void calculate_checksum_value(uint8_t *data_array, uint8_t size) {
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	4613      	mov	r3, r2
 80011bc:	71fb      	strb	r3, [r7, #7]

		this->calculated_CK_A_u8 = 0;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
		this->calculated_CK_B_u8 = 0;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a

		for (int i = 2; i < size; i++) {
 80011ce:	2302      	movs	r3, #2
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	da26      	bge.n	8001228 <_ZN28ublox_neo_m8n_gps_parameters24calculate_checksum_valueEPhh+0x78>

			this->calculated_CK_A_u8 += data_array[i];
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f893 2459 	ldrb.w	r2, [r3, #1113]	; 0x459
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	68b9      	ldr	r1, [r7, #8]
 80011e4:	440b      	add	r3, r1
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4413      	add	r3, r2
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
			this->calculated_CK_B_u8 += this->calculated_CK_A_u8;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f893 245a 	ldrb.w	r2, [r3, #1114]	; 0x45a
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f893 3459 	ldrb.w	r3, [r3, #1113]	; 0x459
 80011fe:	4413      	add	r3, r2
 8001200:	b2da      	uxtb	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a

			this->calculated_CK_A_u8 = this->calculated_CK_A_u8 & 0xFF;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f893 2459 	ldrb.w	r2, [r3, #1113]	; 0x459
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
			this->calculated_CK_B_u8 = this->calculated_CK_B_u8 & 0xFF;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f893 245a 	ldrb.w	r2, [r3, #1114]	; 0x45a
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
		for (int i = 2; i < size; i++) {
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	e7d4      	b.n	80011d2 <_ZN28ublox_neo_m8n_gps_parameters24calculate_checksum_valueEPhh+0x22>

		}
	}
 8001228:	bf00      	nop
 800122a:	371c      	adds	r7, #28
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <_ZN28ublox_neo_m8n_gps_parameters36start_communication_with_gps_via_dmaEv>:

	void start_communication_with_gps_via_dma() {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

		HAL_UART_Receive_DMA(this->uartType, this->recevied_data_dma_u8,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3304      	adds	r3, #4
 8001244:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001248:	4619      	mov	r1, r3
 800124a:	f002 fbe3 	bl	8003a14 <HAL_UART_Receive_DMA>
		CAPTURE_PACKAGE_SIZE);
	}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <main>:
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_DMA_Init(void);
static void MX_UART4_Init(void);

int main(void) {
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0

	HAL_Init();
 800125c:	f000 fb7a 	bl	8001954 <HAL_Init>

	SystemClock_Config();
 8001260:	f000 f814 	bl	800128c <_Z18SystemClock_Configv>

	MX_GPIO_Init();
 8001264:	f000 f93c 	bl	80014e0 <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 8001268:	f000 f914 	bl	8001494 <_ZL11MX_DMA_Initv>

	MX_USART3_UART_Init();
 800126c:	f000 f8de 	bl	800142c <_ZL19MX_USART3_UART_Initv>
	MX_UART4_Init();
 8001270:	f000 f8a8 	bl	80013c4 <_ZL13MX_UART4_Initv>


	neo_m8n_gps_ct.start_communication_with_gps_via_dma();
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <main+0x30>)
 8001276:	f7ff ffdd 	bl	8001234 <_ZN28ublox_neo_m8n_gps_parameters36start_communication_with_gps_via_dmaEv>

	while (1) {

		neo_m8n_gps_ct.get_gps_message();
 800127a:	4803      	ldr	r0, [pc, #12]	; (8001288 <main+0x30>)
 800127c:	f7ff fcf4 	bl	8000c68 <_ZN28ublox_neo_m8n_gps_parameters15get_gps_messageEv>
		HAL_Delay(200);
 8001280:	20c8      	movs	r0, #200	; 0xc8
 8001282:	f000 fbcd 	bl	8001a20 <HAL_Delay>
		neo_m8n_gps_ct.get_gps_message();
 8001286:	e7f8      	b.n	800127a <main+0x22>
 8001288:	20000190 	.word	0x20000190

0800128c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b0b4      	sub	sp, #208	; 0xd0
 8001290:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001292:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001296:	2230      	movs	r2, #48	; 0x30
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f003 fb82 	bl	80049a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	2284      	movs	r2, #132	; 0x84
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 fb73 	bl	80049a4 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80012be:	f001 fab5 	bl	800282c <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <_Z18SystemClock_Configv+0x130>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a3d      	ldr	r2, [pc, #244]	; (80013bc <_Z18SystemClock_Configv+0x130>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <_Z18SystemClock_Configv+0x130>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012da:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <_Z18SystemClock_Configv+0x134>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012e2:	4a37      	ldr	r2, [pc, #220]	; (80013c0 <_Z18SystemClock_Configv+0x134>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <_Z18SystemClock_Configv+0x134>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001300:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001304:	2302      	movs	r3, #2
 8001306:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800130e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001312:	2304      	movs	r3, #4
 8001314:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 72;
 8001318:	2348      	movs	r3, #72	; 0x48
 800131a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800131e:	2302      	movs	r3, #2
 8001320:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8001324:	2303      	movs	r3, #3
 8001326:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800132a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800132e:	4618      	mov	r0, r3
 8001330:	f001 fa8c 	bl	800284c <HAL_RCC_OscConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	bf14      	ite	ne
 800133a:	2301      	movne	r3, #1
 800133c:	2300      	moveq	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <_Z18SystemClock_Configv+0xbc>
		Error_Handler();
 8001344:	f000 f96e 	bl	8001624 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001348:	230f      	movs	r3, #15
 800134a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800135a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001368:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800136c:	2102      	movs	r1, #2
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fd10 	bl	8002d94 <HAL_RCC_ClockConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	bf14      	ite	ne
 800137a:	2301      	movne	r3, #1
 800137c:	2300      	moveq	r3, #0
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <_Z18SystemClock_Configv+0xfc>
		Error_Handler();
 8001384:	f000 f94e 	bl	8001624 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3
 8001388:	f44f 7340 	mov.w	r3, #768	; 0x300
 800138c:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_UART4;
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800138e:	2300      	movs	r3, #0
 8001390:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001392:	2300      	movs	r3, #0
 8001394:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	4618      	mov	r0, r3
 800139c:	f001 fefc 	bl	8003198 <HAL_RCCEx_PeriphCLKConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	bf14      	ite	ne
 80013a6:	2301      	movne	r3, #1
 80013a8:	2300      	moveq	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <_Z18SystemClock_Configv+0x128>
		Error_Handler();
 80013b0:	f000 f938 	bl	8001624 <Error_Handler>
	}
}
 80013b4:	bf00      	nop
 80013b6:	37d0      	adds	r7, #208	; 0xd0
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40007000 	.word	0x40007000

080013c4 <_ZL13MX_UART4_Initv>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UART4_Init 0 */
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */
	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <_ZL13MX_UART4_Initv+0x60>)
 80013ca:	4a17      	ldr	r2, [pc, #92]	; (8001428 <_ZL13MX_UART4_Initv+0x64>)
 80013cc:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <_ZL13MX_UART4_Initv+0x60>)
 80013d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <_ZL13MX_UART4_Initv+0x60>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <_ZL13MX_UART4_Initv+0x60>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <_ZL13MX_UART4_Initv+0x60>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <_ZL13MX_UART4_Initv+0x60>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <_ZL13MX_UART4_Initv+0x60>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <_ZL13MX_UART4_Initv+0x60>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <_ZL13MX_UART4_Initv+0x60>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <_ZL13MX_UART4_Initv+0x60>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8001406:	4807      	ldr	r0, [pc, #28]	; (8001424 <_ZL13MX_UART4_Initv+0x60>)
 8001408:	f002 fab6 	bl	8003978 <HAL_UART_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	bf14      	ite	ne
 8001412:	2301      	movne	r3, #1
 8001414:	2300      	moveq	r3, #0
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <_ZL13MX_UART4_Initv+0x5c>
		Error_Handler();
 800141c:	f000 f902 	bl	8001624 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */
	/* USER CODE END UART4_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000028 	.word	0x20000028
 8001428:	40004c00 	.word	0x40004c00

0800142c <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_Init 0 */
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */
	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <_ZL19MX_USART3_UART_Initv+0x60>)
 8001432:	4a17      	ldr	r2, [pc, #92]	; (8001490 <_ZL19MX_USART3_UART_Initv+0x64>)
 8001434:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <_ZL19MX_USART3_UART_Initv+0x60>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <_ZL19MX_USART3_UART_Initv+0x60>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <_ZL19MX_USART3_UART_Initv+0x60>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <_ZL19MX_USART3_UART_Initv+0x60>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <_ZL19MX_USART3_UART_Initv+0x60>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <_ZL19MX_USART3_UART_Initv+0x60>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <_ZL19MX_USART3_UART_Initv+0x60>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <_ZL19MX_USART3_UART_Initv+0x60>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <_ZL19MX_USART3_UART_Initv+0x60>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800146e:	4807      	ldr	r0, [pc, #28]	; (800148c <_ZL19MX_USART3_UART_Initv+0x60>)
 8001470:	f002 fa82 	bl	8003978 <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	bf14      	ite	ne
 800147a:	2301      	movne	r3, #1
 800147c:	2300      	moveq	r3, #0
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <_ZL19MX_USART3_UART_Initv+0x5c>
		Error_Handler();
 8001484:	f000 f8ce 	bl	8001624 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */
	/* USER CODE END USART3_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200000ac 	.word	0x200000ac
 8001490:	40004800 	.word	0x40004800

08001494 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <_ZL11MX_DMA_Initv+0x48>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <_ZL11MX_DMA_Initv+0x48>)
 80014a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <_ZL11MX_DMA_Initv+0x48>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	200d      	movs	r0, #13
 80014b8:	f000 fbb1 	bl	8001c1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80014bc:	200d      	movs	r0, #13
 80014be:	f000 fbca 	bl	8001c56 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	200f      	movs	r0, #15
 80014c8:	f000 fba9 	bl	8001c1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80014cc:	200f      	movs	r0, #15
 80014ce:	f000 fbc2 	bl	8001c56 <HAL_NVIC_EnableIRQ>

}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	; 0x30
 80014e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	4b46      	ldr	r3, [pc, #280]	; (8001610 <_ZL12MX_GPIO_Initv+0x130>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a45      	ldr	r2, [pc, #276]	; (8001610 <_ZL12MX_GPIO_Initv+0x130>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b43      	ldr	r3, [pc, #268]	; (8001610 <_ZL12MX_GPIO_Initv+0x130>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800150e:	4b40      	ldr	r3, [pc, #256]	; (8001610 <_ZL12MX_GPIO_Initv+0x130>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a3f      	ldr	r2, [pc, #252]	; (8001610 <_ZL12MX_GPIO_Initv+0x130>)
 8001514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <_ZL12MX_GPIO_Initv+0x130>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b3a      	ldr	r3, [pc, #232]	; (8001610 <_ZL12MX_GPIO_Initv+0x130>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a39      	ldr	r2, [pc, #228]	; (8001610 <_ZL12MX_GPIO_Initv+0x130>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <_ZL12MX_GPIO_Initv+0x130>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	4b34      	ldr	r3, [pc, #208]	; (8001610 <_ZL12MX_GPIO_Initv+0x130>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a33      	ldr	r2, [pc, #204]	; (8001610 <_ZL12MX_GPIO_Initv+0x130>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b31      	ldr	r3, [pc, #196]	; (8001610 <_ZL12MX_GPIO_Initv+0x130>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001556:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <_ZL12MX_GPIO_Initv+0x130>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a2d      	ldr	r2, [pc, #180]	; (8001610 <_ZL12MX_GPIO_Initv+0x130>)
 800155c:	f043 0308 	orr.w	r3, r3, #8
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <_ZL12MX_GPIO_Initv+0x130>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800156e:	4b28      	ldr	r3, [pc, #160]	; (8001610 <_ZL12MX_GPIO_Initv+0x130>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a27      	ldr	r2, [pc, #156]	; (8001610 <_ZL12MX_GPIO_Initv+0x130>)
 8001574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b25      	ldr	r3, [pc, #148]	; (8001610 <_ZL12MX_GPIO_Initv+0x130>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f244 0181 	movw	r1, #16513	; 0x4081
 800158c:	4821      	ldr	r0, [pc, #132]	; (8001614 <_ZL12MX_GPIO_Initv+0x134>)
 800158e:	f001 f933 	bl	80027f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8001592:	2200      	movs	r2, #0
 8001594:	2140      	movs	r1, #64	; 0x40
 8001596:	4820      	ldr	r0, [pc, #128]	; (8001618 <_ZL12MX_GPIO_Initv+0x138>)
 8001598:	f001 f92e 	bl	80027f8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 800159c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <_ZL12MX_GPIO_Initv+0x13c>)
 80015a4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	481b      	ldr	r0, [pc, #108]	; (8001620 <_ZL12MX_GPIO_Initv+0x140>)
 80015b2:	f000 ff75 	bl	80024a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 80015b6:	f244 0381 	movw	r3, #16513	; 0x4081
 80015ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4619      	mov	r1, r3
 80015ce:	4811      	ldr	r0, [pc, #68]	; (8001614 <_ZL12MX_GPIO_Initv+0x134>)
 80015d0:	f000 ff66 	bl	80024a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80015d4:	2340      	movs	r3, #64	; 0x40
 80015d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	480b      	ldr	r0, [pc, #44]	; (8001618 <_ZL12MX_GPIO_Initv+0x138>)
 80015ec:	f000 ff58 	bl	80024a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	4619      	mov	r1, r3
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <_ZL12MX_GPIO_Initv+0x138>)
 8001604:	f000 ff4c 	bl	80024a0 <HAL_GPIO_Init>

}
 8001608:	bf00      	nop
 800160a:	3730      	adds	r7, #48	; 0x30
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	40020400 	.word	0x40020400
 8001618:	40021800 	.word	0x40021800
 800161c:	10110000 	.word	0x10110000
 8001620:	40020800 	.word	0x40020800

08001624 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* USER CODE END Error_Handler_Debug */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <_Z41__static_initialization_and_destruction_0ii>:
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d108      	bne.n	8001656 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800164a:	4293      	cmp	r3, r2
 800164c:	d103      	bne.n	8001656 <_Z41__static_initialization_and_destruction_0ii+0x22>
ublox_neo_m8n_gps_parameters neo_m8n_gps_ct(&huart4);
 800164e:	4904      	ldr	r1, [pc, #16]	; (8001660 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001652:	f7ff fa8b 	bl	8000b6c <_ZN28ublox_neo_m8n_gps_parametersC1EP20__UART_HandleTypeDef>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000028 	.word	0x20000028
 8001664:	20000190 	.word	0x20000190

08001668 <_GLOBAL__sub_I_huart4>:
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
 800166c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001670:	2001      	movs	r0, #1
 8001672:	f7ff ffdf 	bl	8001634 <_Z41__static_initialization_and_destruction_0ii>
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <HAL_MspInit+0x44>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <HAL_MspInit+0x44>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <HAL_MspInit+0x44>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_MspInit+0x44>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a08      	ldr	r2, [pc, #32]	; (80016bc <HAL_MspInit+0x44>)
 800169c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_MspInit+0x44>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800

080016c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08c      	sub	sp, #48	; 0x30
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a58      	ldr	r2, [pc, #352]	; (8001840 <HAL_UART_MspInit+0x180>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d17c      	bne.n	80017dc <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80016e2:	4b58      	ldr	r3, [pc, #352]	; (8001844 <HAL_UART_MspInit+0x184>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	4a57      	ldr	r2, [pc, #348]	; (8001844 <HAL_UART_MspInit+0x184>)
 80016e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016ec:	6413      	str	r3, [r2, #64]	; 0x40
 80016ee:	4b55      	ldr	r3, [pc, #340]	; (8001844 <HAL_UART_MspInit+0x184>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016f6:	61bb      	str	r3, [r7, #24]
 80016f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b52      	ldr	r3, [pc, #328]	; (8001844 <HAL_UART_MspInit+0x184>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a51      	ldr	r2, [pc, #324]	; (8001844 <HAL_UART_MspInit+0x184>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b4f      	ldr	r3, [pc, #316]	; (8001844 <HAL_UART_MspInit+0x184>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	4b4c      	ldr	r3, [pc, #304]	; (8001844 <HAL_UART_MspInit+0x184>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a4b      	ldr	r2, [pc, #300]	; (8001844 <HAL_UART_MspInit+0x184>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b49      	ldr	r3, [pc, #292]	; (8001844 <HAL_UART_MspInit+0x184>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800172a:	2301      	movs	r3, #1
 800172c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800173a:	2308      	movs	r3, #8
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 031c 	add.w	r3, r7, #28
 8001742:	4619      	mov	r1, r3
 8001744:	4840      	ldr	r0, [pc, #256]	; (8001848 <HAL_UART_MspInit+0x188>)
 8001746:	f000 feab 	bl	80024a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800174a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800174e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800175c:	2308      	movs	r3, #8
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	4619      	mov	r1, r3
 8001766:	4839      	ldr	r0, [pc, #228]	; (800184c <HAL_UART_MspInit+0x18c>)
 8001768:	f000 fe9a 	bl	80024a0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800176c:	4b38      	ldr	r3, [pc, #224]	; (8001850 <HAL_UART_MspInit+0x190>)
 800176e:	4a39      	ldr	r2, [pc, #228]	; (8001854 <HAL_UART_MspInit+0x194>)
 8001770:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001772:	4b37      	ldr	r3, [pc, #220]	; (8001850 <HAL_UART_MspInit+0x190>)
 8001774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001778:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800177a:	4b35      	ldr	r3, [pc, #212]	; (8001850 <HAL_UART_MspInit+0x190>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001780:	4b33      	ldr	r3, [pc, #204]	; (8001850 <HAL_UART_MspInit+0x190>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001786:	4b32      	ldr	r3, [pc, #200]	; (8001850 <HAL_UART_MspInit+0x190>)
 8001788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800178e:	4b30      	ldr	r3, [pc, #192]	; (8001850 <HAL_UART_MspInit+0x190>)
 8001790:	2200      	movs	r2, #0
 8001792:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001794:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <HAL_UART_MspInit+0x190>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800179a:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <HAL_UART_MspInit+0x190>)
 800179c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017a2:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <HAL_UART_MspInit+0x190>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017a8:	4b29      	ldr	r3, [pc, #164]	; (8001850 <HAL_UART_MspInit+0x190>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80017ae:	4828      	ldr	r0, [pc, #160]	; (8001850 <HAL_UART_MspInit+0x190>)
 80017b0:	f000 fa6c 	bl	8001c8c <HAL_DMA_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 80017ba:	f7ff ff33 	bl	8001624 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a23      	ldr	r2, [pc, #140]	; (8001850 <HAL_UART_MspInit+0x190>)
 80017c2:	671a      	str	r2, [r3, #112]	; 0x70
 80017c4:	4a22      	ldr	r2, [pc, #136]	; (8001850 <HAL_UART_MspInit+0x190>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2034      	movs	r0, #52	; 0x34
 80017d0:	f000 fa25 	bl	8001c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80017d4:	2034      	movs	r0, #52	; 0x34
 80017d6:	f000 fa3e 	bl	8001c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017da:	e02d      	b.n	8001838 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART3)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <HAL_UART_MspInit+0x198>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d128      	bne.n	8001838 <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_UART_MspInit+0x184>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	4a16      	ldr	r2, [pc, #88]	; (8001844 <HAL_UART_MspInit+0x184>)
 80017ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f0:	6413      	str	r3, [r2, #64]	; 0x40
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <HAL_UART_MspInit+0x184>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_UART_MspInit+0x184>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a10      	ldr	r2, [pc, #64]	; (8001844 <HAL_UART_MspInit+0x184>)
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_UART_MspInit+0x184>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001816:	f44f 7340 	mov.w	r3, #768	; 0x300
 800181a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001828:	2307      	movs	r3, #7
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	4619      	mov	r1, r3
 8001832:	480a      	ldr	r0, [pc, #40]	; (800185c <HAL_UART_MspInit+0x19c>)
 8001834:	f000 fe34 	bl	80024a0 <HAL_GPIO_Init>
}
 8001838:	bf00      	nop
 800183a:	3730      	adds	r7, #48	; 0x30
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40004c00 	.word	0x40004c00
 8001844:	40023800 	.word	0x40023800
 8001848:	40020000 	.word	0x40020000
 800184c:	40020800 	.word	0x40020800
 8001850:	20000130 	.word	0x20000130
 8001854:	40026040 	.word	0x40026040
 8001858:	40004800 	.word	0x40004800
 800185c:	40020c00 	.word	0x40020c00

08001860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <NMI_Handler+0x4>

08001866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <HardFault_Handler+0x4>

0800186c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <MemManage_Handler+0x4>

08001872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <BusFault_Handler+0x4>

08001878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <UsageFault_Handler+0x4>

0800187e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ac:	f000 f898 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <DMA1_Stream2_IRQHandler+0x10>)
 80018ba:	f000 fb87 	bl	8001fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000130 	.word	0x20000130

080018c8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <UART4_IRQHandler+0x10>)
 80018ce:	f002 f8df 	bl	8003a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000028 	.word	0x20000028

080018dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <SystemInit+0x20>)
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <SystemInit+0x20>)
 80018e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001938 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001904:	480d      	ldr	r0, [pc, #52]	; (800193c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001906:	490e      	ldr	r1, [pc, #56]	; (8001940 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800190c:	e002      	b.n	8001914 <LoopCopyDataInit>

0800190e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001912:	3304      	adds	r3, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001918:	d3f9      	bcc.n	800190e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800191c:	4c0b      	ldr	r4, [pc, #44]	; (800194c <LoopFillZerobss+0x26>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001920:	e001      	b.n	8001926 <LoopFillZerobss>

08001922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001924:	3204      	adds	r2, #4

08001926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001928:	d3fb      	bcc.n	8001922 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800192a:	f7ff ffd7 	bl	80018dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192e:	f003 f807 	bl	8004940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001932:	f7ff fc91 	bl	8001258 <main>
  bx  lr    
 8001936:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001938:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001940:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001944:	08004a00 	.word	0x08004a00
  ldr r2, =_sbss
 8001948:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800194c:	20000608 	.word	0x20000608

08001950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC_IRQHandler>
	...

08001954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_Init+0x28>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_Init+0x28>)
 800195e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001962:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f000 f94f 	bl	8001c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196a:	2000      	movs	r0, #0
 800196c:	f000 f808 	bl	8001980 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001970:	f7ff fe82 	bl	8001678 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023c00 	.word	0x40023c00

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_InitTick+0x54>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_InitTick+0x58>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001996:	fbb3 f3f1 	udiv	r3, r3, r1
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f967 	bl	8001c72 <HAL_SYSTICK_Config>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00e      	b.n	80019cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d80a      	bhi.n	80019ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f000 f92f 	bl	8001c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c0:	4a06      	ldr	r2, [pc, #24]	; (80019dc <HAL_InitTick+0x5c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x20>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_IncTick+0x24>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_IncTick+0x24>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008
 8001a04:	20000604 	.word	0x20000604

08001a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000604 	.word	0x20000604

08001a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff ffee 	bl	8001a08 <HAL_GetTick>
 8001a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d005      	beq.n	8001a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_Delay+0x44>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a46:	bf00      	nop
 8001a48:	f7ff ffde 	bl	8001a08 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d8f7      	bhi.n	8001a48 <HAL_Delay+0x28>
  {
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000008 	.word	0x20000008

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x40>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a96:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x40>)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	60d3      	str	r3, [r2, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00
 8001aac:	05fa0000 	.word	0x05fa0000

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db0b      	blt.n	8001af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4907      	ldr	r1, [pc, #28]	; (8001b04 <__NVIC_EnableIRQ+0x38>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	; (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	; (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd4:	d301      	bcc.n	8001bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00f      	b.n	8001bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <SysTick_Config+0x40>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be2:	210f      	movs	r1, #15
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f7ff ff8e 	bl	8001b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <SysTick_Config+0x40>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <SysTick_Config+0x40>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff29 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c30:	f7ff ff3e 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	f7ff ff8e 	bl	8001b5c <NVIC_EncodePriority>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff5d 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff31 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ffa2 	bl	8001bc4 <SysTick_Config>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff feb6 	bl	8001a08 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e099      	b.n	8001ddc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0201 	bic.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc8:	e00f      	b.n	8001cea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cca:	f7ff fe9d 	bl	8001a08 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d908      	bls.n	8001cea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e078      	b.n	8001ddc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1e8      	bne.n	8001cca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <HAL_DMA_Init+0x158>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d107      	bne.n	8001d54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f023 0307 	bic.w	r3, r3, #7
 8001d6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d117      	bne.n	8001dae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00e      	beq.n	8001dae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 fb09 	bl	80023a8 <DMA_CheckFifoParam>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2240      	movs	r2, #64	; 0x40
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001daa:	2301      	movs	r3, #1
 8001dac:	e016      	b.n	8001ddc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fac0 	bl	800233c <DMA_CalcBaseAndBitshift>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc4:	223f      	movs	r2, #63	; 0x3f
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	f010803f 	.word	0xf010803f

08001de8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_DMA_Start_IT+0x26>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e048      	b.n	8001ea0 <HAL_DMA_Start_IT+0xb8>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d137      	bne.n	8001e92 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2202      	movs	r2, #2
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 fa52 	bl	80022e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e40:	223f      	movs	r2, #63	; 0x3f
 8001e42:	409a      	lsls	r2, r3
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0216 	orr.w	r2, r2, #22
 8001e56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e66:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d007      	beq.n	8001e80 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0208 	orr.w	r2, r2, #8
 8001e7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e005      	b.n	8001e9e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eb6:	f7ff fda7 	bl	8001a08 <HAL_GetTick>
 8001eba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d008      	beq.n	8001eda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e052      	b.n	8001f80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0216 	bic.w	r2, r2, #22
 8001ee8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695a      	ldr	r2, [r3, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ef8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d103      	bne.n	8001f0a <HAL_DMA_Abort+0x62>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0208 	bic.w	r2, r2, #8
 8001f18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0201 	bic.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f2a:	e013      	b.n	8001f54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f2c:	f7ff fd6c 	bl	8001a08 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d90c      	bls.n	8001f54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e015      	b.n	8001f80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1e4      	bne.n	8001f2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	223f      	movs	r2, #63	; 0x3f
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d004      	beq.n	8001fa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00c      	b.n	8001fc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2205      	movs	r2, #5
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0201 	bic.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001fd8:	4b92      	ldr	r3, [pc, #584]	; (8002224 <HAL_DMA_IRQHandler+0x258>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a92      	ldr	r2, [pc, #584]	; (8002228 <HAL_DMA_IRQHandler+0x25c>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	0a9b      	lsrs	r3, r3, #10
 8001fe4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d01a      	beq.n	8002038 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d013      	beq.n	8002038 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0204 	bic.w	r2, r2, #4
 800201e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002024:	2208      	movs	r2, #8
 8002026:	409a      	lsls	r2, r3
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	f043 0201 	orr.w	r2, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203c:	2201      	movs	r2, #1
 800203e:	409a      	lsls	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d012      	beq.n	800206e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00b      	beq.n	800206e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205a:	2201      	movs	r2, #1
 800205c:	409a      	lsls	r2, r3
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	f043 0202 	orr.w	r2, r3, #2
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002072:	2204      	movs	r2, #4
 8002074:	409a      	lsls	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d012      	beq.n	80020a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00b      	beq.n	80020a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002090:	2204      	movs	r2, #4
 8002092:	409a      	lsls	r2, r3
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209c:	f043 0204 	orr.w	r2, r3, #4
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a8:	2210      	movs	r2, #16
 80020aa:	409a      	lsls	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d043      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d03c      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	2210      	movs	r2, #16
 80020c8:	409a      	lsls	r2, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d018      	beq.n	800210e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d108      	bne.n	80020fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d024      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	4798      	blx	r3
 80020fa:	e01f      	b.n	800213c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01b      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
 800210c:	e016      	b.n	800213c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d107      	bne.n	800212c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0208 	bic.w	r2, r2, #8
 800212a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002140:	2220      	movs	r2, #32
 8002142:	409a      	lsls	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 808e 	beq.w	800226a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 8086 	beq.w	800226a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	2220      	movs	r2, #32
 8002164:	409a      	lsls	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b05      	cmp	r3, #5
 8002174:	d136      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0216 	bic.w	r2, r2, #22
 8002184:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002194:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d103      	bne.n	80021a6 <HAL_DMA_IRQHandler+0x1da>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0208 	bic.w	r2, r2, #8
 80021b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ba:	223f      	movs	r2, #63	; 0x3f
 80021bc:	409a      	lsls	r2, r3
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d07d      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
        }
        return;
 80021e2:	e078      	b.n	80022d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d01c      	beq.n	800222c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d108      	bne.n	8002212 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	2b00      	cmp	r3, #0
 8002206:	d030      	beq.n	800226a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4798      	blx	r3
 8002210:	e02b      	b.n	800226a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002216:	2b00      	cmp	r3, #0
 8002218:	d027      	beq.n	800226a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	4798      	blx	r3
 8002222:	e022      	b.n	800226a <HAL_DMA_IRQHandler+0x29e>
 8002224:	20000000 	.word	0x20000000
 8002228:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10f      	bne.n	800225a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0210 	bic.w	r2, r2, #16
 8002248:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226e:	2b00      	cmp	r3, #0
 8002270:	d032      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d022      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2205      	movs	r2, #5
 8002282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0201 	bic.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	3301      	adds	r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d307      	bcc.n	80022b2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f2      	bne.n	8002296 <HAL_DMA_IRQHandler+0x2ca>
 80022b0:	e000      	b.n	80022b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80022b2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	4798      	blx	r3
 80022d4:	e000      	b.n	80022d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80022d6:	bf00      	nop
    }
  }
}
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop

080022e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b40      	cmp	r3, #64	; 0x40
 800230c:	d108      	bne.n	8002320 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800231e:	e007      	b.n	8002330 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	60da      	str	r2, [r3, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	3b10      	subs	r3, #16
 800234c:	4a13      	ldr	r2, [pc, #76]	; (800239c <DMA_CalcBaseAndBitshift+0x60>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <DMA_CalcBaseAndBitshift+0x64>)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d908      	bls.n	800237c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002372:	4013      	ands	r3, r2
 8002374:	1d1a      	adds	r2, r3, #4
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	659a      	str	r2, [r3, #88]	; 0x58
 800237a:	e006      	b.n	800238a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002384:	4013      	ands	r3, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	aaaaaaab 	.word	0xaaaaaaab
 80023a0:	080049e4 	.word	0x080049e4
 80023a4:	fffffc00 	.word	0xfffffc00

080023a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d11f      	bne.n	8002402 <DMA_CheckFifoParam+0x5a>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d856      	bhi.n	8002476 <DMA_CheckFifoParam+0xce>
 80023c8:	a201      	add	r2, pc, #4	; (adr r2, 80023d0 <DMA_CheckFifoParam+0x28>)
 80023ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ce:	bf00      	nop
 80023d0:	080023e1 	.word	0x080023e1
 80023d4:	080023f3 	.word	0x080023f3
 80023d8:	080023e1 	.word	0x080023e1
 80023dc:	08002477 	.word	0x08002477
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d046      	beq.n	800247a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f0:	e043      	b.n	800247a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023fa:	d140      	bne.n	800247e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002400:	e03d      	b.n	800247e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800240a:	d121      	bne.n	8002450 <DMA_CheckFifoParam+0xa8>
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d837      	bhi.n	8002482 <DMA_CheckFifoParam+0xda>
 8002412:	a201      	add	r2, pc, #4	; (adr r2, 8002418 <DMA_CheckFifoParam+0x70>)
 8002414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002418:	08002429 	.word	0x08002429
 800241c:	0800242f 	.word	0x0800242f
 8002420:	08002429 	.word	0x08002429
 8002424:	08002441 	.word	0x08002441
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
      break;
 800242c:	e030      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d025      	beq.n	8002486 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243e:	e022      	b.n	8002486 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002448:	d11f      	bne.n	800248a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800244e:	e01c      	b.n	800248a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d903      	bls.n	800245e <DMA_CheckFifoParam+0xb6>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d003      	beq.n	8002464 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800245c:	e018      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
      break;
 8002462:	e015      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00e      	beq.n	800248e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
      break;
 8002474:	e00b      	b.n	800248e <DMA_CheckFifoParam+0xe6>
      break;
 8002476:	bf00      	nop
 8002478:	e00a      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 800247a:	bf00      	nop
 800247c:	e008      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 800247e:	bf00      	nop
 8002480:	e006      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 8002482:	bf00      	nop
 8002484:	e004      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 8002486:	bf00      	nop
 8002488:	e002      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;   
 800248a:	bf00      	nop
 800248c:	e000      	b.n	8002490 <DMA_CheckFifoParam+0xe8>
      break;
 800248e:	bf00      	nop
    }
  } 
  
  return status; 
 8002490:	7bfb      	ldrb	r3, [r7, #15]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop

080024a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	e175      	b.n	80027ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024c0:	2201      	movs	r2, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	429a      	cmp	r2, r3
 80024da:	f040 8164 	bne.w	80027a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d00b      	beq.n	80024fe <HAL_GPIO_Init+0x5e>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d007      	beq.n	80024fe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024f2:	2b11      	cmp	r3, #17
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b12      	cmp	r3, #18
 80024fc:	d130      	bne.n	8002560 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	2203      	movs	r2, #3
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002534:	2201      	movs	r2, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 0201 	and.w	r2, r3, #1
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x100>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b12      	cmp	r3, #18
 800259e:	d123      	bne.n	80025e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	08da      	lsrs	r2, r3, #3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3208      	adds	r2, #8
 80025a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	220f      	movs	r2, #15
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	08da      	lsrs	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3208      	adds	r2, #8
 80025e2:	69b9      	ldr	r1, [r7, #24]
 80025e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0203 	and.w	r2, r3, #3
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80be 	beq.w	80027a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262a:	4b66      	ldr	r3, [pc, #408]	; (80027c4 <HAL_GPIO_Init+0x324>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	4a65      	ldr	r2, [pc, #404]	; (80027c4 <HAL_GPIO_Init+0x324>)
 8002630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002634:	6453      	str	r3, [r2, #68]	; 0x44
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <HAL_GPIO_Init+0x324>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002642:	4a61      	ldr	r2, [pc, #388]	; (80027c8 <HAL_GPIO_Init+0x328>)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3302      	adds	r3, #2
 800264a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a58      	ldr	r2, [pc, #352]	; (80027cc <HAL_GPIO_Init+0x32c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d037      	beq.n	80026de <HAL_GPIO_Init+0x23e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a57      	ldr	r2, [pc, #348]	; (80027d0 <HAL_GPIO_Init+0x330>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d031      	beq.n	80026da <HAL_GPIO_Init+0x23a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a56      	ldr	r2, [pc, #344]	; (80027d4 <HAL_GPIO_Init+0x334>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d02b      	beq.n	80026d6 <HAL_GPIO_Init+0x236>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a55      	ldr	r2, [pc, #340]	; (80027d8 <HAL_GPIO_Init+0x338>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d025      	beq.n	80026d2 <HAL_GPIO_Init+0x232>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a54      	ldr	r2, [pc, #336]	; (80027dc <HAL_GPIO_Init+0x33c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01f      	beq.n	80026ce <HAL_GPIO_Init+0x22e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a53      	ldr	r2, [pc, #332]	; (80027e0 <HAL_GPIO_Init+0x340>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d019      	beq.n	80026ca <HAL_GPIO_Init+0x22a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a52      	ldr	r2, [pc, #328]	; (80027e4 <HAL_GPIO_Init+0x344>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <HAL_GPIO_Init+0x226>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a51      	ldr	r2, [pc, #324]	; (80027e8 <HAL_GPIO_Init+0x348>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00d      	beq.n	80026c2 <HAL_GPIO_Init+0x222>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a50      	ldr	r2, [pc, #320]	; (80027ec <HAL_GPIO_Init+0x34c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <HAL_GPIO_Init+0x21e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4f      	ldr	r2, [pc, #316]	; (80027f0 <HAL_GPIO_Init+0x350>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <HAL_GPIO_Init+0x21a>
 80026b6:	2309      	movs	r3, #9
 80026b8:	e012      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026ba:	230a      	movs	r3, #10
 80026bc:	e010      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026be:	2308      	movs	r3, #8
 80026c0:	e00e      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026c2:	2307      	movs	r3, #7
 80026c4:	e00c      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026c6:	2306      	movs	r3, #6
 80026c8:	e00a      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026ca:	2305      	movs	r3, #5
 80026cc:	e008      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026ce:	2304      	movs	r3, #4
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026d2:	2303      	movs	r3, #3
 80026d4:	e004      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_GPIO_Init+0x240>
 80026de:	2300      	movs	r3, #0
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f002 0203 	and.w	r2, r2, #3
 80026e6:	0092      	lsls	r2, r2, #2
 80026e8:	4093      	lsls	r3, r2
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026f0:	4935      	ldr	r1, [pc, #212]	; (80027c8 <HAL_GPIO_Init+0x328>)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	3302      	adds	r3, #2
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026fe:	4b3d      	ldr	r3, [pc, #244]	; (80027f4 <HAL_GPIO_Init+0x354>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002722:	4a34      	ldr	r2, [pc, #208]	; (80027f4 <HAL_GPIO_Init+0x354>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002728:	4b32      	ldr	r3, [pc, #200]	; (80027f4 <HAL_GPIO_Init+0x354>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800274c:	4a29      	ldr	r2, [pc, #164]	; (80027f4 <HAL_GPIO_Init+0x354>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002752:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <HAL_GPIO_Init+0x354>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002776:	4a1f      	ldr	r2, [pc, #124]	; (80027f4 <HAL_GPIO_Init+0x354>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <HAL_GPIO_Init+0x354>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a0:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <HAL_GPIO_Init+0x354>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3301      	adds	r3, #1
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b0f      	cmp	r3, #15
 80027b0:	f67f ae86 	bls.w	80024c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40013800 	.word	0x40013800
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40020800 	.word	0x40020800
 80027d8:	40020c00 	.word	0x40020c00
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40021400 	.word	0x40021400
 80027e4:	40021800 	.word	0x40021800
 80027e8:	40021c00 	.word	0x40021c00
 80027ec:	40022000 	.word	0x40022000
 80027f0:	40022400 	.word	0x40022400
 80027f4:	40013c00 	.word	0x40013c00

080027f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
 8002804:	4613      	mov	r3, r2
 8002806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002808:	787b      	ldrb	r3, [r7, #1]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002814:	e003      	b.n	800281e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002816:	887b      	ldrh	r3, [r7, #2]
 8002818:	041a      	lsls	r2, r3, #16
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	619a      	str	r2, [r3, #24]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40007000 	.word	0x40007000

0800284c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002854:	2300      	movs	r3, #0
 8002856:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e291      	b.n	8002d86 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 8087 	beq.w	800297e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002870:	4b96      	ldr	r3, [pc, #600]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b04      	cmp	r3, #4
 800287a:	d00c      	beq.n	8002896 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287c:	4b93      	ldr	r3, [pc, #588]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 030c 	and.w	r3, r3, #12
 8002884:	2b08      	cmp	r3, #8
 8002886:	d112      	bne.n	80028ae <HAL_RCC_OscConfig+0x62>
 8002888:	4b90      	ldr	r3, [pc, #576]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002894:	d10b      	bne.n	80028ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002896:	4b8d      	ldr	r3, [pc, #564]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d06c      	beq.n	800297c <HAL_RCC_OscConfig+0x130>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d168      	bne.n	800297c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e26b      	b.n	8002d86 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b6:	d106      	bne.n	80028c6 <HAL_RCC_OscConfig+0x7a>
 80028b8:	4b84      	ldr	r3, [pc, #528]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a83      	ldr	r2, [pc, #524]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 80028be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	e02e      	b.n	8002924 <HAL_RCC_OscConfig+0xd8>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x9c>
 80028ce:	4b7f      	ldr	r3, [pc, #508]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a7e      	ldr	r2, [pc, #504]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 80028d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	4b7c      	ldr	r3, [pc, #496]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a7b      	ldr	r2, [pc, #492]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 80028e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e01d      	b.n	8002924 <HAL_RCC_OscConfig+0xd8>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0xc0>
 80028f2:	4b76      	ldr	r3, [pc, #472]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a75      	ldr	r2, [pc, #468]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b73      	ldr	r3, [pc, #460]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a72      	ldr	r2, [pc, #456]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0xd8>
 800290c:	4b6f      	ldr	r3, [pc, #444]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a6e      	ldr	r2, [pc, #440]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b6c      	ldr	r3, [pc, #432]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a6b      	ldr	r2, [pc, #428]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 800291e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7ff f86c 	bl	8001a08 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002934:	f7ff f868 	bl	8001a08 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e21f      	b.n	8002d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b61      	ldr	r3, [pc, #388]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0xe8>
 8002952:	e014      	b.n	800297e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7ff f858 	bl	8001a08 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800295c:	f7ff f854 	bl	8001a08 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e20b      	b.n	8002d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	4b57      	ldr	r3, [pc, #348]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x110>
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d069      	beq.n	8002a5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800298a:	4b50      	ldr	r3, [pc, #320]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002996:	4b4d      	ldr	r3, [pc, #308]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d11c      	bne.n	80029dc <HAL_RCC_OscConfig+0x190>
 80029a2:	4b4a      	ldr	r3, [pc, #296]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d116      	bne.n	80029dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	4b47      	ldr	r3, [pc, #284]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_RCC_OscConfig+0x17a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e1df      	b.n	8002d86 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b41      	ldr	r3, [pc, #260]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	493d      	ldr	r1, [pc, #244]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	e040      	b.n	8002a5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d023      	beq.n	8002a2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e4:	4b39      	ldr	r3, [pc, #228]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a38      	ldr	r2, [pc, #224]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7ff f80a 	bl	8001a08 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f8:	f7ff f806 	bl	8001a08 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e1bd      	b.n	8002d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0a:	4b30      	ldr	r3, [pc, #192]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a16:	4b2d      	ldr	r3, [pc, #180]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4929      	ldr	r1, [pc, #164]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]
 8002a2a:	e018      	b.n	8002a5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2c:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a26      	ldr	r2, [pc, #152]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002a32:	f023 0301 	bic.w	r3, r3, #1
 8002a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe ffe6 	bl	8001a08 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a40:	f7fe ffe2 	bl	8001a08 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e199      	b.n	8002d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a52:	4b1e      	ldr	r3, [pc, #120]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d038      	beq.n	8002adc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d019      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a76:	4a15      	ldr	r2, [pc, #84]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7e:	f7fe ffc3 	bl	8001a08 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a86:	f7fe ffbf 	bl	8001a08 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e176      	b.n	8002d86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a98:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x23a>
 8002aa4:	e01a      	b.n	8002adc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aaa:	4a08      	ldr	r2, [pc, #32]	; (8002acc <HAL_RCC_OscConfig+0x280>)
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab2:	f7fe ffa9 	bl	8001a08 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab8:	e00a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aba:	f7fe ffa5 	bl	8001a08 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d903      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e15c      	b.n	8002d86 <HAL_RCC_OscConfig+0x53a>
 8002acc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad0:	4b91      	ldr	r3, [pc, #580]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1ee      	bne.n	8002aba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 80a4 	beq.w	8002c32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aea:	4b8b      	ldr	r3, [pc, #556]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10d      	bne.n	8002b12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af6:	4b88      	ldr	r3, [pc, #544]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	4a87      	ldr	r2, [pc, #540]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b00:	6413      	str	r3, [r2, #64]	; 0x40
 8002b02:	4b85      	ldr	r3, [pc, #532]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b12:	4b82      	ldr	r3, [pc, #520]	; (8002d1c <HAL_RCC_OscConfig+0x4d0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d118      	bne.n	8002b50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b1e:	4b7f      	ldr	r3, [pc, #508]	; (8002d1c <HAL_RCC_OscConfig+0x4d0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a7e      	ldr	r2, [pc, #504]	; (8002d1c <HAL_RCC_OscConfig+0x4d0>)
 8002b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2a:	f7fe ff6d 	bl	8001a08 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b32:	f7fe ff69 	bl	8001a08 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b64      	cmp	r3, #100	; 0x64
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e120      	b.n	8002d86 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b44:	4b75      	ldr	r3, [pc, #468]	; (8002d1c <HAL_RCC_OscConfig+0x4d0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d106      	bne.n	8002b66 <HAL_RCC_OscConfig+0x31a>
 8002b58:	4b6f      	ldr	r3, [pc, #444]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	4a6e      	ldr	r2, [pc, #440]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6713      	str	r3, [r2, #112]	; 0x70
 8002b64:	e02d      	b.n	8002bc2 <HAL_RCC_OscConfig+0x376>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCC_OscConfig+0x33c>
 8002b6e:	4b6a      	ldr	r3, [pc, #424]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	4a69      	ldr	r2, [pc, #420]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7a:	4b67      	ldr	r3, [pc, #412]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	4a66      	ldr	r2, [pc, #408]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002b80:	f023 0304 	bic.w	r3, r3, #4
 8002b84:	6713      	str	r3, [r2, #112]	; 0x70
 8002b86:	e01c      	b.n	8002bc2 <HAL_RCC_OscConfig+0x376>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	d10c      	bne.n	8002baa <HAL_RCC_OscConfig+0x35e>
 8002b90:	4b61      	ldr	r3, [pc, #388]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4a60      	ldr	r2, [pc, #384]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002b96:	f043 0304 	orr.w	r3, r3, #4
 8002b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9c:	4b5e      	ldr	r3, [pc, #376]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	4a5d      	ldr	r2, [pc, #372]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba8:	e00b      	b.n	8002bc2 <HAL_RCC_OscConfig+0x376>
 8002baa:	4b5b      	ldr	r3, [pc, #364]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	4a5a      	ldr	r2, [pc, #360]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb6:	4b58      	ldr	r3, [pc, #352]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a57      	ldr	r2, [pc, #348]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002bbc:	f023 0304 	bic.w	r3, r3, #4
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d015      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bca:	f7fe ff1d 	bl	8001a08 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7fe ff19 	bl	8001a08 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e0ce      	b.n	8002d86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be8:	4b4b      	ldr	r3, [pc, #300]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0ee      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x386>
 8002bf4:	e014      	b.n	8002c20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf6:	f7fe ff07 	bl	8001a08 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfc:	e00a      	b.n	8002c14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfe:	f7fe ff03 	bl	8001a08 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0b8      	b.n	8002d86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c14:	4b40      	ldr	r3, [pc, #256]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ee      	bne.n	8002bfe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d105      	bne.n	8002c32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c26:	4b3c      	ldr	r3, [pc, #240]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	4a3b      	ldr	r2, [pc, #236]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 80a4 	beq.w	8002d84 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c3c:	4b36      	ldr	r3, [pc, #216]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d06b      	beq.n	8002d20 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d149      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c50:	4b31      	ldr	r3, [pc, #196]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a30      	ldr	r2, [pc, #192]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fed4 	bl	8001a08 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c64:	f7fe fed0 	bl	8001a08 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e087      	b.n	8002d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c76:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69da      	ldr	r2, [r3, #28]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	019b      	lsls	r3, r3, #6
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	085b      	lsrs	r3, r3, #1
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	041b      	lsls	r3, r3, #16
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	061b      	lsls	r3, r3, #24
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	4a1b      	ldr	r2, [pc, #108]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002caa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb0:	4b19      	ldr	r3, [pc, #100]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fea4 	bl	8001a08 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7fe fea0 	bl	8001a08 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e057      	b.n	8002d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x478>
 8002ce2:	e04f      	b.n	8002d84 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fe8a 	bl	8001a08 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fe fe86 	bl	8001a08 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e03d      	b.n	8002d86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0a:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_RCC_OscConfig+0x4cc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x4ac>
 8002d16:	e035      	b.n	8002d84 <HAL_RCC_OscConfig+0x538>
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d20:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <HAL_RCC_OscConfig+0x544>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d028      	beq.n	8002d80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d121      	bne.n	8002d80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d11a      	bne.n	8002d80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d50:	4013      	ands	r3, r2
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d111      	bne.n	8002d80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d107      	bne.n	8002d80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800

08002d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0d0      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dac:	4b6a      	ldr	r3, [pc, #424]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d910      	bls.n	8002ddc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b67      	ldr	r3, [pc, #412]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 020f 	bic.w	r2, r3, #15
 8002dc2:	4965      	ldr	r1, [pc, #404]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dca:	4b63      	ldr	r3, [pc, #396]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0b8      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d020      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df4:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dfe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e0c:	4b53      	ldr	r3, [pc, #332]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e18:	4b50      	ldr	r3, [pc, #320]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	494d      	ldr	r1, [pc, #308]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d040      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d107      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d115      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e07f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e56:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e073      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e66:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06b      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e76:	4b39      	ldr	r3, [pc, #228]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f023 0203 	bic.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4936      	ldr	r1, [pc, #216]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e88:	f7fe fdbe 	bl	8001a08 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e90:	f7fe fdba 	bl	8001a08 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e053      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 020c 	and.w	r2, r3, #12
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1eb      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d210      	bcs.n	8002ee8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 020f 	bic.w	r2, r3, #15
 8002ece:	4922      	ldr	r1, [pc, #136]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e032      	b.n	8002f4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	4916      	ldr	r1, [pc, #88]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	490e      	ldr	r1, [pc, #56]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f26:	f000 f821 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	490a      	ldr	r1, [pc, #40]	; (8002f60 <HAL_RCC_ClockConfig+0x1cc>)
 8002f38:	5ccb      	ldrb	r3, [r1, r3]
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_RCC_ClockConfig+0x1d0>)
 8002f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCC_ClockConfig+0x1d4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe fd1a 	bl	8001980 <HAL_InitTick>

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023c00 	.word	0x40023c00
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	080049cc 	.word	0x080049cc
 8002f64:	20000000 	.word	0x20000000
 8002f68:	20000004 	.word	0x20000004

08002f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	607b      	str	r3, [r7, #4]
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f84:	4b67      	ldr	r3, [pc, #412]	; (8003124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d00d      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x40>
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	f200 80bd 	bhi.w	8003110 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d003      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f9e:	e0b7      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fa0:	4b61      	ldr	r3, [pc, #388]	; (8003128 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002fa2:	60bb      	str	r3, [r7, #8]
      break;
 8002fa4:	e0b7      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fa6:	4b61      	ldr	r3, [pc, #388]	; (800312c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002fa8:	60bb      	str	r3, [r7, #8]
      break;
 8002faa:	e0b4      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fac:	4b5d      	ldr	r3, [pc, #372]	; (8003124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fb4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fb6:	4b5b      	ldr	r3, [pc, #364]	; (8003124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d04d      	beq.n	800305e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc2:	4b58      	ldr	r3, [pc, #352]	; (8003124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	099b      	lsrs	r3, r3, #6
 8002fc8:	461a      	mov	r2, r3
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fd2:	f04f 0100 	mov.w	r1, #0
 8002fd6:	ea02 0800 	and.w	r8, r2, r0
 8002fda:	ea03 0901 	and.w	r9, r3, r1
 8002fde:	4640      	mov	r0, r8
 8002fe0:	4649      	mov	r1, r9
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	014b      	lsls	r3, r1, #5
 8002fec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ff0:	0142      	lsls	r2, r0, #5
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	ebb0 0008 	subs.w	r0, r0, r8
 8002ffa:	eb61 0109 	sbc.w	r1, r1, r9
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	018b      	lsls	r3, r1, #6
 8003008:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800300c:	0182      	lsls	r2, r0, #6
 800300e:	1a12      	subs	r2, r2, r0
 8003010:	eb63 0301 	sbc.w	r3, r3, r1
 8003014:	f04f 0000 	mov.w	r0, #0
 8003018:	f04f 0100 	mov.w	r1, #0
 800301c:	00d9      	lsls	r1, r3, #3
 800301e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003022:	00d0      	lsls	r0, r2, #3
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	eb12 0208 	adds.w	r2, r2, r8
 800302c:	eb43 0309 	adc.w	r3, r3, r9
 8003030:	f04f 0000 	mov.w	r0, #0
 8003034:	f04f 0100 	mov.w	r1, #0
 8003038:	0259      	lsls	r1, r3, #9
 800303a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800303e:	0250      	lsls	r0, r2, #9
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	461a      	mov	r2, r3
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	f7fd fc10 	bl	8000874 <__aeabi_uldivmod>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4613      	mov	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	e04a      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305e:	4b31      	ldr	r3, [pc, #196]	; (8003124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	099b      	lsrs	r3, r3, #6
 8003064:	461a      	mov	r2, r3
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800306e:	f04f 0100 	mov.w	r1, #0
 8003072:	ea02 0400 	and.w	r4, r2, r0
 8003076:	ea03 0501 	and.w	r5, r3, r1
 800307a:	4620      	mov	r0, r4
 800307c:	4629      	mov	r1, r5
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	014b      	lsls	r3, r1, #5
 8003088:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800308c:	0142      	lsls	r2, r0, #5
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	1b00      	subs	r0, r0, r4
 8003094:	eb61 0105 	sbc.w	r1, r1, r5
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	018b      	lsls	r3, r1, #6
 80030a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030a6:	0182      	lsls	r2, r0, #6
 80030a8:	1a12      	subs	r2, r2, r0
 80030aa:	eb63 0301 	sbc.w	r3, r3, r1
 80030ae:	f04f 0000 	mov.w	r0, #0
 80030b2:	f04f 0100 	mov.w	r1, #0
 80030b6:	00d9      	lsls	r1, r3, #3
 80030b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030bc:	00d0      	lsls	r0, r2, #3
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	1912      	adds	r2, r2, r4
 80030c4:	eb45 0303 	adc.w	r3, r5, r3
 80030c8:	f04f 0000 	mov.w	r0, #0
 80030cc:	f04f 0100 	mov.w	r1, #0
 80030d0:	0299      	lsls	r1, r3, #10
 80030d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030d6:	0290      	lsls	r0, r2, #10
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4610      	mov	r0, r2
 80030de:	4619      	mov	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	f7fd fbc4 	bl	8000874 <__aeabi_uldivmod>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4613      	mov	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	0c1b      	lsrs	r3, r3, #16
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	3301      	adds	r3, #1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	fbb2 f3f3 	udiv	r3, r2, r3
 800310c:	60bb      	str	r3, [r7, #8]
      break;
 800310e:	e002      	b.n	8003116 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003112:	60bb      	str	r3, [r7, #8]
      break;
 8003114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003116:	68bb      	ldr	r3, [r7, #8]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	00f42400 	.word	0x00f42400
 800312c:	007a1200 	.word	0x007a1200

08003130 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003134:	4b03      	ldr	r3, [pc, #12]	; (8003144 <HAL_RCC_GetHCLKFreq+0x14>)
 8003136:	681b      	ldr	r3, [r3, #0]
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20000000 	.word	0x20000000

08003148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800314c:	f7ff fff0 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8003150:	4602      	mov	r2, r0
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	0a9b      	lsrs	r3, r3, #10
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	4903      	ldr	r1, [pc, #12]	; (800316c <HAL_RCC_GetPCLK1Freq+0x24>)
 800315e:	5ccb      	ldrb	r3, [r1, r3]
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003164:	4618      	mov	r0, r3
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40023800 	.word	0x40023800
 800316c:	080049dc 	.word	0x080049dc

08003170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003174:	f7ff ffdc 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8003178:	4602      	mov	r2, r0
 800317a:	4b05      	ldr	r3, [pc, #20]	; (8003190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	0b5b      	lsrs	r3, r3, #13
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	4903      	ldr	r1, [pc, #12]	; (8003194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003186:	5ccb      	ldrb	r3, [r1, r3]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800318c:	4618      	mov	r0, r3
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40023800 	.word	0x40023800
 8003194:	080049dc 	.word	0x080049dc

08003198 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d012      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031c0:	4b69      	ldr	r3, [pc, #420]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	4a68      	ldr	r2, [pc, #416]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80031ca:	6093      	str	r3, [r2, #8]
 80031cc:	4b66      	ldr	r3, [pc, #408]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d4:	4964      	ldr	r1, [pc, #400]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80031e2:	2301      	movs	r3, #1
 80031e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d017      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031f2:	4b5d      	ldr	r3, [pc, #372]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003200:	4959      	ldr	r1, [pc, #356]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003210:	d101      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003212:	2301      	movs	r3, #1
 8003214:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800321e:	2301      	movs	r3, #1
 8003220:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d017      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800322e:	4b4e      	ldr	r3, [pc, #312]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003234:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	494a      	ldr	r1, [pc, #296]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800324c:	d101      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800324e:	2301      	movs	r3, #1
 8003250:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800325a:	2301      	movs	r3, #1
 800325c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800326a:	2301      	movs	r3, #1
 800326c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 808b 	beq.w	8003392 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800327c:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	4a39      	ldr	r2, [pc, #228]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003286:	6413      	str	r3, [r2, #64]	; 0x40
 8003288:	4b37      	ldr	r3, [pc, #220]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003294:	4b35      	ldr	r3, [pc, #212]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a34      	ldr	r2, [pc, #208]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800329a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800329e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a0:	f7fe fbb2 	bl	8001a08 <HAL_GetTick>
 80032a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a8:	f7fe fbae 	bl	8001a08 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	; 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e357      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032ba:	4b2c      	ldr	r3, [pc, #176]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032c6:	4b28      	ldr	r3, [pc, #160]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d035      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d02e      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032e4:	4b20      	ldr	r3, [pc, #128]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ee:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	4a1d      	ldr	r2, [pc, #116]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a1a      	ldr	r2, [pc, #104]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003304:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003306:	4a18      	ldr	r2, [pc, #96]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800330c:	4b16      	ldr	r3, [pc, #88]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d114      	bne.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe fb76 	bl	8001a08 <HAL_GetTick>
 800331c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331e:	e00a      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003320:	f7fe fb72 	bl	8001a08 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f241 3288 	movw	r2, #5000	; 0x1388
 800332e:	4293      	cmp	r3, r2
 8003330:	d901      	bls.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e319      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003336:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0ee      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800334e:	d111      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800335e:	400b      	ands	r3, r1
 8003360:	4901      	ldr	r1, [pc, #4]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
 8003366:	e00b      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003368:	40023800 	.word	0x40023800
 800336c:	40007000 	.word	0x40007000
 8003370:	0ffffcff 	.word	0x0ffffcff
 8003374:	4bb1      	ldr	r3, [pc, #708]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	4ab0      	ldr	r2, [pc, #704]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800337a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800337e:	6093      	str	r3, [r2, #8]
 8003380:	4bae      	ldr	r3, [pc, #696]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003382:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338c:	49ab      	ldr	r1, [pc, #684]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800338e:	4313      	orrs	r3, r2
 8003390:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	2b00      	cmp	r3, #0
 800339c:	d010      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800339e:	4ba7      	ldr	r3, [pc, #668]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a4:	4aa5      	ldr	r2, [pc, #660]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033ae:	4ba3      	ldr	r3, [pc, #652]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b8:	49a0      	ldr	r1, [pc, #640]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00a      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033cc:	4b9b      	ldr	r3, [pc, #620]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033da:	4998      	ldr	r1, [pc, #608]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033ee:	4b93      	ldr	r3, [pc, #588]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033fc:	498f      	ldr	r1, [pc, #572]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003410:	4b8a      	ldr	r3, [pc, #552]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800341e:	4987      	ldr	r1, [pc, #540]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003432:	4b82      	ldr	r3, [pc, #520]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003438:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	497e      	ldr	r1, [pc, #504]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003454:	4b79      	ldr	r3, [pc, #484]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	f023 0203 	bic.w	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	4976      	ldr	r1, [pc, #472]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003476:	4b71      	ldr	r3, [pc, #452]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	f023 020c 	bic.w	r2, r3, #12
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003484:	496d      	ldr	r1, [pc, #436]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003498:	4b68      	ldr	r3, [pc, #416]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a6:	4965      	ldr	r1, [pc, #404]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034ba:	4b60      	ldr	r3, [pc, #384]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c8:	495c      	ldr	r1, [pc, #368]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034dc:	4b57      	ldr	r3, [pc, #348]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ea:	4954      	ldr	r1, [pc, #336]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034fe:	4b4f      	ldr	r3, [pc, #316]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003504:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	494b      	ldr	r1, [pc, #300]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003520:	4b46      	ldr	r3, [pc, #280]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352e:	4943      	ldr	r1, [pc, #268]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003542:	4b3e      	ldr	r3, [pc, #248]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003550:	493a      	ldr	r1, [pc, #232]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003564:	4b35      	ldr	r3, [pc, #212]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003572:	4932      	ldr	r1, [pc, #200]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d011      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003586:	4b2d      	ldr	r3, [pc, #180]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003594:	4929      	ldr	r1, [pc, #164]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035a4:	d101      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80035a6:	2301      	movs	r3, #1
 80035a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80035b6:	2301      	movs	r3, #1
 80035b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035c6:	4b1d      	ldr	r3, [pc, #116]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d4:	4919      	ldr	r1, [pc, #100]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00b      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035e8:	4b14      	ldr	r3, [pc, #80]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035f8:	4910      	ldr	r1, [pc, #64]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d006      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 80d9 	beq.w	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003614:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a08      	ldr	r2, [pc, #32]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800361a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800361e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003620:	f7fe f9f2 	bl	8001a08 <HAL_GetTick>
 8003624:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003626:	e00b      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003628:	f7fe f9ee 	bl	8001a08 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d904      	bls.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e197      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800363a:	bf00      	nop
 800363c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003640:	4b6c      	ldr	r3, [pc, #432]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ed      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d021      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365c:	2b00      	cmp	r3, #0
 800365e:	d11d      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003660:	4b64      	ldr	r3, [pc, #400]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003666:	0c1b      	lsrs	r3, r3, #16
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800366e:	4b61      	ldr	r3, [pc, #388]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003674:	0e1b      	lsrs	r3, r3, #24
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	019a      	lsls	r2, r3, #6
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	041b      	lsls	r3, r3, #16
 8003686:	431a      	orrs	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	061b      	lsls	r3, r3, #24
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	071b      	lsls	r3, r3, #28
 8003694:	4957      	ldr	r1, [pc, #348]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d004      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b0:	d00a      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d02e      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c6:	d129      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036c8:	4b4a      	ldr	r3, [pc, #296]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ce:	0c1b      	lsrs	r3, r3, #16
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036d6:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036dc:	0f1b      	lsrs	r3, r3, #28
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	019a      	lsls	r2, r3, #6
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	041b      	lsls	r3, r3, #16
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	061b      	lsls	r3, r3, #24
 80036f6:	431a      	orrs	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	071b      	lsls	r3, r3, #28
 80036fc:	493d      	ldr	r1, [pc, #244]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003704:	4b3b      	ldr	r3, [pc, #236]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800370a:	f023 021f 	bic.w	r2, r3, #31
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	3b01      	subs	r3, #1
 8003714:	4937      	ldr	r1, [pc, #220]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01d      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003728:	4b32      	ldr	r3, [pc, #200]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800372a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800372e:	0e1b      	lsrs	r3, r3, #24
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003736:	4b2f      	ldr	r3, [pc, #188]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800373c:	0f1b      	lsrs	r3, r3, #28
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	019a      	lsls	r2, r3, #6
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	041b      	lsls	r3, r3, #16
 8003750:	431a      	orrs	r2, r3
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	061b      	lsls	r3, r3, #24
 8003756:	431a      	orrs	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	071b      	lsls	r3, r3, #28
 800375c:	4925      	ldr	r1, [pc, #148]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d011      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	019a      	lsls	r2, r3, #6
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	041b      	lsls	r3, r3, #16
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	061b      	lsls	r3, r3, #24
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	071b      	lsls	r3, r3, #28
 800378c:	4919      	ldr	r1, [pc, #100]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003794:	4b17      	ldr	r3, [pc, #92]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a16      	ldr	r2, [pc, #88]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800379a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800379e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a0:	f7fe f932 	bl	8001a08 <HAL_GetTick>
 80037a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037a8:	f7fe f92e 	bl	8001a08 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	; 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e0d7      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037ba:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	f040 80cd 	bne.w	8003968 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80037ce:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a08      	ldr	r2, [pc, #32]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037da:	f7fe f915 	bl	8001a08 <HAL_GetTick>
 80037de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037e0:	e00a      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037e2:	f7fe f911 	bl	8001a08 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b64      	cmp	r3, #100	; 0x64
 80037ee:	d903      	bls.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e0ba      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80037f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037f8:	4b5e      	ldr	r3, [pc, #376]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003804:	d0ed      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003816:	2b00      	cmp	r3, #0
 8003818:	d009      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003822:	2b00      	cmp	r3, #0
 8003824:	d02e      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d12a      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800382e:	4b51      	ldr	r3, [pc, #324]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003834:	0c1b      	lsrs	r3, r3, #16
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800383c:	4b4d      	ldr	r3, [pc, #308]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	0f1b      	lsrs	r3, r3, #28
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	019a      	lsls	r2, r3, #6
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	041b      	lsls	r3, r3, #16
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	061b      	lsls	r3, r3, #24
 800385c:	431a      	orrs	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	071b      	lsls	r3, r3, #28
 8003862:	4944      	ldr	r1, [pc, #272]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800386a:	4b42      	ldr	r3, [pc, #264]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800386c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003870:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	3b01      	subs	r3, #1
 800387a:	021b      	lsls	r3, r3, #8
 800387c:	493d      	ldr	r1, [pc, #244]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d022      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003894:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003898:	d11d      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800389a:	4b36      	ldr	r3, [pc, #216]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a0:	0e1b      	lsrs	r3, r3, #24
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038a8:	4b32      	ldr	r3, [pc, #200]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	0f1b      	lsrs	r3, r3, #28
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	019a      	lsls	r2, r3, #6
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	041b      	lsls	r3, r3, #16
 80038c2:	431a      	orrs	r2, r3
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	061b      	lsls	r3, r3, #24
 80038c8:	431a      	orrs	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	071b      	lsls	r3, r3, #28
 80038ce:	4929      	ldr	r1, [pc, #164]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d028      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038e2:	4b24      	ldr	r3, [pc, #144]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	0e1b      	lsrs	r3, r3, #24
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038f0:	4b20      	ldr	r3, [pc, #128]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	0c1b      	lsrs	r3, r3, #16
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	019a      	lsls	r2, r3, #6
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	041b      	lsls	r3, r3, #16
 8003908:	431a      	orrs	r2, r3
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	061b      	lsls	r3, r3, #24
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	071b      	lsls	r3, r3, #28
 8003916:	4917      	ldr	r1, [pc, #92]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800391e:	4b15      	ldr	r3, [pc, #84]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003924:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	4911      	ldr	r1, [pc, #68]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003934:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a0e      	ldr	r2, [pc, #56]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800393a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003940:	f7fe f862 	bl	8001a08 <HAL_GetTick>
 8003944:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003946:	e008      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003948:	f7fe f85e 	bl	8001a08 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b64      	cmp	r3, #100	; 0x64
 8003954:	d901      	bls.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e007      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003962:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003966:	d1ef      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3720      	adds	r7, #32
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800

08003978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e040      	b.n	8003a0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd fe90 	bl	80016c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2224      	movs	r2, #36	; 0x24
 80039a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0201 	bic.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fa8a 	bl	8003ed0 <UART_SetConfig>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e022      	b.n	8003a0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fce0 	bl	8004394 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fd67 	bl	80044d8 <UART_CheckIdleState>
 8003a0a:	4603      	mov	r3, r0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d12c      	bne.n	8003a84 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <HAL_UART_Receive_DMA+0x22>
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e025      	b.n	8003a86 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_UART_Receive_DMA+0x34>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e01e      	b.n	8003a86 <HAL_UART_Receive_DMA+0x72>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003a72:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	461a      	mov	r2, r3
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fddc 	bl	8004638 <UART_Start_Receive_DMA>
 8003a80:	4603      	mov	r3, r0
 8003a82:	e000      	b.n	8003a86 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
  }
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d113      	bne.n	8003ae8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00e      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d009      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 81b9 	beq.w	8003e50 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
      }
      return;
 8003ae6:	e1b3      	b.n	8003e50 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80e3 	beq.w	8003cb6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d105      	bne.n	8003b06 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4ba5      	ldr	r3, [pc, #660]	; (8003d94 <HAL_UART_IRQHandler+0x304>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80d8 	beq.w	8003cb6 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d010      	beq.n	8003b32 <HAL_UART_IRQHandler+0xa2>
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b28:	f043 0201 	orr.w	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d010      	beq.n	8003b5e <HAL_UART_IRQHandler+0xce>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00b      	beq.n	8003b5e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b54:	f043 0204 	orr.w	r2, r3, #4
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d010      	beq.n	8003b8a <HAL_UART_IRQHandler+0xfa>
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00b      	beq.n	8003b8a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2204      	movs	r2, #4
 8003b78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b80:	f043 0202 	orr.w	r2, r3, #2
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d015      	beq.n	8003bc0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d104      	bne.n	8003ba8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00b      	beq.n	8003bc0 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2208      	movs	r2, #8
 8003bae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bb6:	f043 0208 	orr.w	r2, r3, #8
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d011      	beq.n	8003bee <HAL_UART_IRQHandler+0x15e>
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00c      	beq.n	8003bee <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003be4:	f043 0220 	orr.w	r2, r3, #32
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 812d 	beq.w	8003e54 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f003 0320 	and.w	r3, r3, #32
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00c      	beq.n	8003c1e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d007      	beq.n	8003c1e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c24:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d004      	beq.n	8003c3e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d031      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fd7b 	bl	800473a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d123      	bne.n	8003c9a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c60:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d013      	beq.n	8003c92 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	4a4a      	ldr	r2, [pc, #296]	; (8003d98 <HAL_UART_IRQHandler+0x308>)
 8003c70:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe f986 	bl	8001f88 <HAL_DMA_Abort_IT>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d017      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c90:	e00f      	b.n	8003cb2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f906 	bl	8003ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c98:	e00b      	b.n	8003cb2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f902 	bl	8003ea4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca0:	e007      	b.n	8003cb2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f8fe 	bl	8003ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003cb0:	e0d0      	b.n	8003e54 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb2:	bf00      	nop
    return;
 8003cb4:	e0ce      	b.n	8003e54 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	f040 80a7 	bne.w	8003e0e <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 80a1 	beq.w	8003e0e <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 809b 	beq.w	8003e0e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2210      	movs	r2, #16
 8003cde:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cea:	2b40      	cmp	r3, #64	; 0x40
 8003cec:	d156      	bne.n	8003d9c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8003cf8:	893b      	ldrh	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80ac 	beq.w	8003e58 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d06:	893a      	ldrh	r2, [r7, #8]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	f080 80a5 	bcs.w	8003e58 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	893a      	ldrh	r2, [r7, #8]
 8003d12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d20:	d02a      	beq.n	8003d78 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d30:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0201 	bic.w	r2, r2, #1
 8003d40:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d50:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0210 	bic.w	r2, r2, #16
 8003d6c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fe f898 	bl	8001ea8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f893 	bl	8003eb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d92:	e061      	b.n	8003e58 <HAL_UART_IRQHandler+0x3c8>
 8003d94:	04000120 	.word	0x04000120
 8003d98:	080048e1 	.word	0x080048e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d050      	beq.n	8003e5c <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8003dba:	897b      	ldrh	r3, [r7, #10]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d04d      	beq.n	8003e5c <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003dce:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0201 	bic.w	r2, r2, #1
 8003dde:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0210 	bic.w	r2, r2, #16
 8003e00:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e02:	897b      	ldrh	r3, [r7, #10]
 8003e04:	4619      	mov	r1, r3
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f856 	bl	8003eb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e0c:	e026      	b.n	8003e5c <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00d      	beq.n	8003e34 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01a      	beq.n	8003e60 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	4798      	blx	r3
    }
    return;
 8003e32:	e015      	b.n	8003e60 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d011      	beq.n	8003e62 <HAL_UART_IRQHandler+0x3d2>
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00c      	beq.n	8003e62 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fd5f 	bl	800490c <UART_EndTransmit_IT>
    return;
 8003e4e:	e008      	b.n	8003e62 <HAL_UART_IRQHandler+0x3d2>
      return;
 8003e50:	bf00      	nop
 8003e52:	e006      	b.n	8003e62 <HAL_UART_IRQHandler+0x3d2>
    return;
 8003e54:	bf00      	nop
 8003e56:	e004      	b.n	8003e62 <HAL_UART_IRQHandler+0x3d2>
      return;
 8003e58:	bf00      	nop
 8003e5a:	e002      	b.n	8003e62 <HAL_UART_IRQHandler+0x3d2>
      return;
 8003e5c:	bf00      	nop
 8003e5e:	e000      	b.n	8003e62 <HAL_UART_IRQHandler+0x3d2>
    return;
 8003e60:	bf00      	nop
  }

}
 8003e62:	3720      	adds	r7, #32
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4ba7      	ldr	r3, [pc, #668]	; (8004198 <UART_SetConfig+0x2c8>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6812      	ldr	r2, [r2, #0]
 8003f02:	6979      	ldr	r1, [r7, #20]
 8003f04:	430b      	orrs	r3, r1
 8003f06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a95      	ldr	r2, [pc, #596]	; (800419c <UART_SetConfig+0x2cc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d120      	bne.n	8003f8e <UART_SetConfig+0xbe>
 8003f4c:	4b94      	ldr	r3, [pc, #592]	; (80041a0 <UART_SetConfig+0x2d0>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d816      	bhi.n	8003f88 <UART_SetConfig+0xb8>
 8003f5a:	a201      	add	r2, pc, #4	; (adr r2, 8003f60 <UART_SetConfig+0x90>)
 8003f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f60:	08003f71 	.word	0x08003f71
 8003f64:	08003f7d 	.word	0x08003f7d
 8003f68:	08003f77 	.word	0x08003f77
 8003f6c:	08003f83 	.word	0x08003f83
 8003f70:	2301      	movs	r3, #1
 8003f72:	77fb      	strb	r3, [r7, #31]
 8003f74:	e14f      	b.n	8004216 <UART_SetConfig+0x346>
 8003f76:	2302      	movs	r3, #2
 8003f78:	77fb      	strb	r3, [r7, #31]
 8003f7a:	e14c      	b.n	8004216 <UART_SetConfig+0x346>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	77fb      	strb	r3, [r7, #31]
 8003f80:	e149      	b.n	8004216 <UART_SetConfig+0x346>
 8003f82:	2308      	movs	r3, #8
 8003f84:	77fb      	strb	r3, [r7, #31]
 8003f86:	e146      	b.n	8004216 <UART_SetConfig+0x346>
 8003f88:	2310      	movs	r3, #16
 8003f8a:	77fb      	strb	r3, [r7, #31]
 8003f8c:	e143      	b.n	8004216 <UART_SetConfig+0x346>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a84      	ldr	r2, [pc, #528]	; (80041a4 <UART_SetConfig+0x2d4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d132      	bne.n	8003ffe <UART_SetConfig+0x12e>
 8003f98:	4b81      	ldr	r3, [pc, #516]	; (80041a0 <UART_SetConfig+0x2d0>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9e:	f003 030c 	and.w	r3, r3, #12
 8003fa2:	2b0c      	cmp	r3, #12
 8003fa4:	d828      	bhi.n	8003ff8 <UART_SetConfig+0x128>
 8003fa6:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <UART_SetConfig+0xdc>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08003fe1 	.word	0x08003fe1
 8003fb0:	08003ff9 	.word	0x08003ff9
 8003fb4:	08003ff9 	.word	0x08003ff9
 8003fb8:	08003ff9 	.word	0x08003ff9
 8003fbc:	08003fed 	.word	0x08003fed
 8003fc0:	08003ff9 	.word	0x08003ff9
 8003fc4:	08003ff9 	.word	0x08003ff9
 8003fc8:	08003ff9 	.word	0x08003ff9
 8003fcc:	08003fe7 	.word	0x08003fe7
 8003fd0:	08003ff9 	.word	0x08003ff9
 8003fd4:	08003ff9 	.word	0x08003ff9
 8003fd8:	08003ff9 	.word	0x08003ff9
 8003fdc:	08003ff3 	.word	0x08003ff3
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	77fb      	strb	r3, [r7, #31]
 8003fe4:	e117      	b.n	8004216 <UART_SetConfig+0x346>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	77fb      	strb	r3, [r7, #31]
 8003fea:	e114      	b.n	8004216 <UART_SetConfig+0x346>
 8003fec:	2304      	movs	r3, #4
 8003fee:	77fb      	strb	r3, [r7, #31]
 8003ff0:	e111      	b.n	8004216 <UART_SetConfig+0x346>
 8003ff2:	2308      	movs	r3, #8
 8003ff4:	77fb      	strb	r3, [r7, #31]
 8003ff6:	e10e      	b.n	8004216 <UART_SetConfig+0x346>
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	77fb      	strb	r3, [r7, #31]
 8003ffc:	e10b      	b.n	8004216 <UART_SetConfig+0x346>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a69      	ldr	r2, [pc, #420]	; (80041a8 <UART_SetConfig+0x2d8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d120      	bne.n	800404a <UART_SetConfig+0x17a>
 8004008:	4b65      	ldr	r3, [pc, #404]	; (80041a0 <UART_SetConfig+0x2d0>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004012:	2b30      	cmp	r3, #48	; 0x30
 8004014:	d013      	beq.n	800403e <UART_SetConfig+0x16e>
 8004016:	2b30      	cmp	r3, #48	; 0x30
 8004018:	d814      	bhi.n	8004044 <UART_SetConfig+0x174>
 800401a:	2b20      	cmp	r3, #32
 800401c:	d009      	beq.n	8004032 <UART_SetConfig+0x162>
 800401e:	2b20      	cmp	r3, #32
 8004020:	d810      	bhi.n	8004044 <UART_SetConfig+0x174>
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <UART_SetConfig+0x15c>
 8004026:	2b10      	cmp	r3, #16
 8004028:	d006      	beq.n	8004038 <UART_SetConfig+0x168>
 800402a:	e00b      	b.n	8004044 <UART_SetConfig+0x174>
 800402c:	2300      	movs	r3, #0
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e0f1      	b.n	8004216 <UART_SetConfig+0x346>
 8004032:	2302      	movs	r3, #2
 8004034:	77fb      	strb	r3, [r7, #31]
 8004036:	e0ee      	b.n	8004216 <UART_SetConfig+0x346>
 8004038:	2304      	movs	r3, #4
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e0eb      	b.n	8004216 <UART_SetConfig+0x346>
 800403e:	2308      	movs	r3, #8
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e0e8      	b.n	8004216 <UART_SetConfig+0x346>
 8004044:	2310      	movs	r3, #16
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e0e5      	b.n	8004216 <UART_SetConfig+0x346>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a57      	ldr	r2, [pc, #348]	; (80041ac <UART_SetConfig+0x2dc>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d120      	bne.n	8004096 <UART_SetConfig+0x1c6>
 8004054:	4b52      	ldr	r3, [pc, #328]	; (80041a0 <UART_SetConfig+0x2d0>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800405e:	2bc0      	cmp	r3, #192	; 0xc0
 8004060:	d013      	beq.n	800408a <UART_SetConfig+0x1ba>
 8004062:	2bc0      	cmp	r3, #192	; 0xc0
 8004064:	d814      	bhi.n	8004090 <UART_SetConfig+0x1c0>
 8004066:	2b80      	cmp	r3, #128	; 0x80
 8004068:	d009      	beq.n	800407e <UART_SetConfig+0x1ae>
 800406a:	2b80      	cmp	r3, #128	; 0x80
 800406c:	d810      	bhi.n	8004090 <UART_SetConfig+0x1c0>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <UART_SetConfig+0x1a8>
 8004072:	2b40      	cmp	r3, #64	; 0x40
 8004074:	d006      	beq.n	8004084 <UART_SetConfig+0x1b4>
 8004076:	e00b      	b.n	8004090 <UART_SetConfig+0x1c0>
 8004078:	2300      	movs	r3, #0
 800407a:	77fb      	strb	r3, [r7, #31]
 800407c:	e0cb      	b.n	8004216 <UART_SetConfig+0x346>
 800407e:	2302      	movs	r3, #2
 8004080:	77fb      	strb	r3, [r7, #31]
 8004082:	e0c8      	b.n	8004216 <UART_SetConfig+0x346>
 8004084:	2304      	movs	r3, #4
 8004086:	77fb      	strb	r3, [r7, #31]
 8004088:	e0c5      	b.n	8004216 <UART_SetConfig+0x346>
 800408a:	2308      	movs	r3, #8
 800408c:	77fb      	strb	r3, [r7, #31]
 800408e:	e0c2      	b.n	8004216 <UART_SetConfig+0x346>
 8004090:	2310      	movs	r3, #16
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e0bf      	b.n	8004216 <UART_SetConfig+0x346>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a45      	ldr	r2, [pc, #276]	; (80041b0 <UART_SetConfig+0x2e0>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d125      	bne.n	80040ec <UART_SetConfig+0x21c>
 80040a0:	4b3f      	ldr	r3, [pc, #252]	; (80041a0 <UART_SetConfig+0x2d0>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ae:	d017      	beq.n	80040e0 <UART_SetConfig+0x210>
 80040b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040b4:	d817      	bhi.n	80040e6 <UART_SetConfig+0x216>
 80040b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ba:	d00b      	beq.n	80040d4 <UART_SetConfig+0x204>
 80040bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c0:	d811      	bhi.n	80040e6 <UART_SetConfig+0x216>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <UART_SetConfig+0x1fe>
 80040c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ca:	d006      	beq.n	80040da <UART_SetConfig+0x20a>
 80040cc:	e00b      	b.n	80040e6 <UART_SetConfig+0x216>
 80040ce:	2300      	movs	r3, #0
 80040d0:	77fb      	strb	r3, [r7, #31]
 80040d2:	e0a0      	b.n	8004216 <UART_SetConfig+0x346>
 80040d4:	2302      	movs	r3, #2
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	e09d      	b.n	8004216 <UART_SetConfig+0x346>
 80040da:	2304      	movs	r3, #4
 80040dc:	77fb      	strb	r3, [r7, #31]
 80040de:	e09a      	b.n	8004216 <UART_SetConfig+0x346>
 80040e0:	2308      	movs	r3, #8
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e097      	b.n	8004216 <UART_SetConfig+0x346>
 80040e6:	2310      	movs	r3, #16
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e094      	b.n	8004216 <UART_SetConfig+0x346>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a30      	ldr	r2, [pc, #192]	; (80041b4 <UART_SetConfig+0x2e4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d125      	bne.n	8004142 <UART_SetConfig+0x272>
 80040f6:	4b2a      	ldr	r3, [pc, #168]	; (80041a0 <UART_SetConfig+0x2d0>)
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004100:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004104:	d017      	beq.n	8004136 <UART_SetConfig+0x266>
 8004106:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800410a:	d817      	bhi.n	800413c <UART_SetConfig+0x26c>
 800410c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004110:	d00b      	beq.n	800412a <UART_SetConfig+0x25a>
 8004112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004116:	d811      	bhi.n	800413c <UART_SetConfig+0x26c>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <UART_SetConfig+0x254>
 800411c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004120:	d006      	beq.n	8004130 <UART_SetConfig+0x260>
 8004122:	e00b      	b.n	800413c <UART_SetConfig+0x26c>
 8004124:	2301      	movs	r3, #1
 8004126:	77fb      	strb	r3, [r7, #31]
 8004128:	e075      	b.n	8004216 <UART_SetConfig+0x346>
 800412a:	2302      	movs	r3, #2
 800412c:	77fb      	strb	r3, [r7, #31]
 800412e:	e072      	b.n	8004216 <UART_SetConfig+0x346>
 8004130:	2304      	movs	r3, #4
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e06f      	b.n	8004216 <UART_SetConfig+0x346>
 8004136:	2308      	movs	r3, #8
 8004138:	77fb      	strb	r3, [r7, #31]
 800413a:	e06c      	b.n	8004216 <UART_SetConfig+0x346>
 800413c:	2310      	movs	r3, #16
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e069      	b.n	8004216 <UART_SetConfig+0x346>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1c      	ldr	r2, [pc, #112]	; (80041b8 <UART_SetConfig+0x2e8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d137      	bne.n	80041bc <UART_SetConfig+0x2ec>
 800414c:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <UART_SetConfig+0x2d0>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004152:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004156:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800415a:	d017      	beq.n	800418c <UART_SetConfig+0x2bc>
 800415c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004160:	d817      	bhi.n	8004192 <UART_SetConfig+0x2c2>
 8004162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004166:	d00b      	beq.n	8004180 <UART_SetConfig+0x2b0>
 8004168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800416c:	d811      	bhi.n	8004192 <UART_SetConfig+0x2c2>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <UART_SetConfig+0x2aa>
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004176:	d006      	beq.n	8004186 <UART_SetConfig+0x2b6>
 8004178:	e00b      	b.n	8004192 <UART_SetConfig+0x2c2>
 800417a:	2300      	movs	r3, #0
 800417c:	77fb      	strb	r3, [r7, #31]
 800417e:	e04a      	b.n	8004216 <UART_SetConfig+0x346>
 8004180:	2302      	movs	r3, #2
 8004182:	77fb      	strb	r3, [r7, #31]
 8004184:	e047      	b.n	8004216 <UART_SetConfig+0x346>
 8004186:	2304      	movs	r3, #4
 8004188:	77fb      	strb	r3, [r7, #31]
 800418a:	e044      	b.n	8004216 <UART_SetConfig+0x346>
 800418c:	2308      	movs	r3, #8
 800418e:	77fb      	strb	r3, [r7, #31]
 8004190:	e041      	b.n	8004216 <UART_SetConfig+0x346>
 8004192:	2310      	movs	r3, #16
 8004194:	77fb      	strb	r3, [r7, #31]
 8004196:	e03e      	b.n	8004216 <UART_SetConfig+0x346>
 8004198:	efff69f3 	.word	0xefff69f3
 800419c:	40011000 	.word	0x40011000
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40004400 	.word	0x40004400
 80041a8:	40004800 	.word	0x40004800
 80041ac:	40004c00 	.word	0x40004c00
 80041b0:	40005000 	.word	0x40005000
 80041b4:	40011400 	.word	0x40011400
 80041b8:	40007800 	.word	0x40007800
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a71      	ldr	r2, [pc, #452]	; (8004388 <UART_SetConfig+0x4b8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d125      	bne.n	8004212 <UART_SetConfig+0x342>
 80041c6:	4b71      	ldr	r3, [pc, #452]	; (800438c <UART_SetConfig+0x4bc>)
 80041c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041d4:	d017      	beq.n	8004206 <UART_SetConfig+0x336>
 80041d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041da:	d817      	bhi.n	800420c <UART_SetConfig+0x33c>
 80041dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041e0:	d00b      	beq.n	80041fa <UART_SetConfig+0x32a>
 80041e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041e6:	d811      	bhi.n	800420c <UART_SetConfig+0x33c>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <UART_SetConfig+0x324>
 80041ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041f0:	d006      	beq.n	8004200 <UART_SetConfig+0x330>
 80041f2:	e00b      	b.n	800420c <UART_SetConfig+0x33c>
 80041f4:	2300      	movs	r3, #0
 80041f6:	77fb      	strb	r3, [r7, #31]
 80041f8:	e00d      	b.n	8004216 <UART_SetConfig+0x346>
 80041fa:	2302      	movs	r3, #2
 80041fc:	77fb      	strb	r3, [r7, #31]
 80041fe:	e00a      	b.n	8004216 <UART_SetConfig+0x346>
 8004200:	2304      	movs	r3, #4
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	e007      	b.n	8004216 <UART_SetConfig+0x346>
 8004206:	2308      	movs	r3, #8
 8004208:	77fb      	strb	r3, [r7, #31]
 800420a:	e004      	b.n	8004216 <UART_SetConfig+0x346>
 800420c:	2310      	movs	r3, #16
 800420e:	77fb      	strb	r3, [r7, #31]
 8004210:	e001      	b.n	8004216 <UART_SetConfig+0x346>
 8004212:	2310      	movs	r3, #16
 8004214:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800421e:	d15b      	bne.n	80042d8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004220:	7ffb      	ldrb	r3, [r7, #31]
 8004222:	2b08      	cmp	r3, #8
 8004224:	d827      	bhi.n	8004276 <UART_SetConfig+0x3a6>
 8004226:	a201      	add	r2, pc, #4	; (adr r2, 800422c <UART_SetConfig+0x35c>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	08004251 	.word	0x08004251
 8004230:	08004259 	.word	0x08004259
 8004234:	08004261 	.word	0x08004261
 8004238:	08004277 	.word	0x08004277
 800423c:	08004267 	.word	0x08004267
 8004240:	08004277 	.word	0x08004277
 8004244:	08004277 	.word	0x08004277
 8004248:	08004277 	.word	0x08004277
 800424c:	0800426f 	.word	0x0800426f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004250:	f7fe ff7a 	bl	8003148 <HAL_RCC_GetPCLK1Freq>
 8004254:	61b8      	str	r0, [r7, #24]
        break;
 8004256:	e013      	b.n	8004280 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004258:	f7fe ff8a 	bl	8003170 <HAL_RCC_GetPCLK2Freq>
 800425c:	61b8      	str	r0, [r7, #24]
        break;
 800425e:	e00f      	b.n	8004280 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004260:	4b4b      	ldr	r3, [pc, #300]	; (8004390 <UART_SetConfig+0x4c0>)
 8004262:	61bb      	str	r3, [r7, #24]
        break;
 8004264:	e00c      	b.n	8004280 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004266:	f7fe fe81 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 800426a:	61b8      	str	r0, [r7, #24]
        break;
 800426c:	e008      	b.n	8004280 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800426e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004272:	61bb      	str	r3, [r7, #24]
        break;
 8004274:	e004      	b.n	8004280 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	77bb      	strb	r3, [r7, #30]
        break;
 800427e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d074      	beq.n	8004370 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	005a      	lsls	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	085b      	lsrs	r3, r3, #1
 8004290:	441a      	add	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	b29b      	uxth	r3, r3
 800429c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2b0f      	cmp	r3, #15
 80042a2:	d916      	bls.n	80042d2 <UART_SetConfig+0x402>
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042aa:	d212      	bcs.n	80042d2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	f023 030f 	bic.w	r3, r3, #15
 80042b4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	085b      	lsrs	r3, r3, #1
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	89fb      	ldrh	r3, [r7, #14]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	89fa      	ldrh	r2, [r7, #14]
 80042ce:	60da      	str	r2, [r3, #12]
 80042d0:	e04e      	b.n	8004370 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	77bb      	strb	r3, [r7, #30]
 80042d6:	e04b      	b.n	8004370 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042d8:	7ffb      	ldrb	r3, [r7, #31]
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d827      	bhi.n	800432e <UART_SetConfig+0x45e>
 80042de:	a201      	add	r2, pc, #4	; (adr r2, 80042e4 <UART_SetConfig+0x414>)
 80042e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e4:	08004309 	.word	0x08004309
 80042e8:	08004311 	.word	0x08004311
 80042ec:	08004319 	.word	0x08004319
 80042f0:	0800432f 	.word	0x0800432f
 80042f4:	0800431f 	.word	0x0800431f
 80042f8:	0800432f 	.word	0x0800432f
 80042fc:	0800432f 	.word	0x0800432f
 8004300:	0800432f 	.word	0x0800432f
 8004304:	08004327 	.word	0x08004327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004308:	f7fe ff1e 	bl	8003148 <HAL_RCC_GetPCLK1Freq>
 800430c:	61b8      	str	r0, [r7, #24]
        break;
 800430e:	e013      	b.n	8004338 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004310:	f7fe ff2e 	bl	8003170 <HAL_RCC_GetPCLK2Freq>
 8004314:	61b8      	str	r0, [r7, #24]
        break;
 8004316:	e00f      	b.n	8004338 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004318:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <UART_SetConfig+0x4c0>)
 800431a:	61bb      	str	r3, [r7, #24]
        break;
 800431c:	e00c      	b.n	8004338 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800431e:	f7fe fe25 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8004322:	61b8      	str	r0, [r7, #24]
        break;
 8004324:	e008      	b.n	8004338 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800432a:	61bb      	str	r3, [r7, #24]
        break;
 800432c:	e004      	b.n	8004338 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	77bb      	strb	r3, [r7, #30]
        break;
 8004336:	bf00      	nop
    }

    if (pclk != 0U)
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d018      	beq.n	8004370 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	085a      	lsrs	r2, r3, #1
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	441a      	add	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004350:	b29b      	uxth	r3, r3
 8004352:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	2b0f      	cmp	r3, #15
 8004358:	d908      	bls.n	800436c <UART_SetConfig+0x49c>
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004360:	d204      	bcs.n	800436c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	60da      	str	r2, [r3, #12]
 800436a:	e001      	b.n	8004370 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800437c:	7fbb      	ldrb	r3, [r7, #30]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3720      	adds	r7, #32
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40007c00 	.word	0x40007c00
 800438c:	40023800 	.word	0x40023800
 8004390:	00f42400 	.word	0x00f42400

08004394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01a      	beq.n	80044aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004492:	d10a      	bne.n	80044aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	605a      	str	r2, [r3, #4]
  }
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af02      	add	r7, sp, #8
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044e8:	f7fd fa8e 	bl	8001a08 <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d10e      	bne.n	800451a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f817 	bl	800453e <UART_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e00d      	b.n	8004536 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	4613      	mov	r3, r2
 800454c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800454e:	e05e      	b.n	800460e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004556:	d05a      	beq.n	800460e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004558:	f7fd fa56 	bl	8001a08 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	429a      	cmp	r2, r3
 8004566:	d302      	bcc.n	800456e <UART_WaitOnFlagUntilTimeout+0x30>
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d11b      	bne.n	80045a6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800457c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0201 	bic.w	r2, r2, #1
 800458c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e043      	b.n	800462e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d02c      	beq.n	800460e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045c2:	d124      	bne.n	800460e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045dc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0201 	bic.w	r2, r2, #1
 80045ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e00f      	b.n	800462e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69da      	ldr	r2, [r3, #28]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4013      	ands	r3, r2
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	429a      	cmp	r2, r3
 800461c:	bf0c      	ite	eq
 800461e:	2301      	moveq	r3, #1
 8004620:	2300      	movne	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	461a      	mov	r2, r3
 8004626:	79fb      	ldrb	r3, [r7, #7]
 8004628:	429a      	cmp	r2, r3
 800462a:	d091      	beq.n	8004550 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	4613      	mov	r3, r2
 8004644:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	88fa      	ldrh	r2, [r7, #6]
 8004650:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2222      	movs	r2, #34	; 0x22
 8004660:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004666:	2b00      	cmp	r3, #0
 8004668:	d02b      	beq.n	80046c2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	4a25      	ldr	r2, [pc, #148]	; (8004704 <UART_Start_Receive_DMA+0xcc>)
 8004670:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	4a24      	ldr	r2, [pc, #144]	; (8004708 <UART_Start_Receive_DMA+0xd0>)
 8004678:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	4a23      	ldr	r2, [pc, #140]	; (800470c <UART_Start_Receive_DMA+0xd4>)
 8004680:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	2200      	movs	r2, #0
 8004688:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3324      	adds	r3, #36	; 0x24
 8004694:	4619      	mov	r1, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469a:	461a      	mov	r2, r3
 800469c:	88fb      	ldrh	r3, [r7, #6]
 800469e:	f7fd fba3 	bl	8001de8 <HAL_DMA_Start_IT>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00c      	beq.n	80046c2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2210      	movs	r2, #16
 80046ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e01c      	b.n	80046fc <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046d8:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 0201 	orr.w	r2, r2, #1
 80046e8:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046f8:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	08004799 	.word	0x08004799
 8004708:	0800482d 	.word	0x0800482d
 800470c:	08004865 	.word	0x08004865

08004710 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004726:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	679a      	str	r2, [r3, #120]	; 0x78
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004750:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004766:	2b01      	cmp	r3, #1
 8004768:	d107      	bne.n	800477a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0210 	bic.w	r2, r2, #16
 8004778:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ae:	d02a      	beq.n	8004806 <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047c6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0201 	bic.w	r2, r2, #1
 80047d6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2220      	movs	r2, #32
 80047ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d107      	bne.n	8004806 <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0210 	bic.w	r2, r2, #16
 8004804:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480a:	2b01      	cmp	r3, #1
 800480c:	d107      	bne.n	800481e <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004814:	4619      	mov	r1, r3
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f7ff fb4e 	bl	8003eb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800481c:	e002      	b.n	8004824 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f7ff fb2c 	bl	8003e7c <HAL_UART_RxCpltCallback>
}
 8004824:	bf00      	nop
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483e:	2b01      	cmp	r3, #1
 8004840:	d109      	bne.n	8004856 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004848:	085b      	lsrs	r3, r3, #1
 800484a:	b29b      	uxth	r3, r3
 800484c:	4619      	mov	r1, r3
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f7ff fb32 	bl	8003eb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004854:	e002      	b.n	800485c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f7ff fb1a 	bl	8003e90 <HAL_UART_RxHalfCpltCallback>
}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004870:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004876:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800487c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004888:	2b80      	cmp	r3, #128	; 0x80
 800488a:	d109      	bne.n	80048a0 <UART_DMAError+0x3c>
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2b21      	cmp	r3, #33	; 0x21
 8004890:	d106      	bne.n	80048a0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2200      	movs	r2, #0
 8004896:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800489a:	6978      	ldr	r0, [r7, #20]
 800489c:	f7ff ff38 	bl	8004710 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	d109      	bne.n	80048c2 <UART_DMAError+0x5e>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2b22      	cmp	r3, #34	; 0x22
 80048b2:	d106      	bne.n	80048c2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80048bc:	6978      	ldr	r0, [r7, #20]
 80048be:	f7ff ff3c 	bl	800473a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048c8:	f043 0210 	orr.w	r2, r3, #16
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048d2:	6978      	ldr	r0, [r7, #20]
 80048d4:	f7ff fae6 	bl	8003ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048d8:	bf00      	nop
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f7ff fad0 	bl	8003ea4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004904:	bf00      	nop
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004922:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7ff fa99 	bl	8003e68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004936:	bf00      	nop
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <__libc_init_array>:
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	4d0d      	ldr	r5, [pc, #52]	; (8004978 <__libc_init_array+0x38>)
 8004944:	4c0d      	ldr	r4, [pc, #52]	; (800497c <__libc_init_array+0x3c>)
 8004946:	1b64      	subs	r4, r4, r5
 8004948:	10a4      	asrs	r4, r4, #2
 800494a:	2600      	movs	r6, #0
 800494c:	42a6      	cmp	r6, r4
 800494e:	d109      	bne.n	8004964 <__libc_init_array+0x24>
 8004950:	4d0b      	ldr	r5, [pc, #44]	; (8004980 <__libc_init_array+0x40>)
 8004952:	4c0c      	ldr	r4, [pc, #48]	; (8004984 <__libc_init_array+0x44>)
 8004954:	f000 f82e 	bl	80049b4 <_init>
 8004958:	1b64      	subs	r4, r4, r5
 800495a:	10a4      	asrs	r4, r4, #2
 800495c:	2600      	movs	r6, #0
 800495e:	42a6      	cmp	r6, r4
 8004960:	d105      	bne.n	800496e <__libc_init_array+0x2e>
 8004962:	bd70      	pop	{r4, r5, r6, pc}
 8004964:	f855 3b04 	ldr.w	r3, [r5], #4
 8004968:	4798      	blx	r3
 800496a:	3601      	adds	r6, #1
 800496c:	e7ee      	b.n	800494c <__libc_init_array+0xc>
 800496e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004972:	4798      	blx	r3
 8004974:	3601      	adds	r6, #1
 8004976:	e7f2      	b.n	800495e <__libc_init_array+0x1e>
 8004978:	080049f4 	.word	0x080049f4
 800497c:	080049f4 	.word	0x080049f4
 8004980:	080049f4 	.word	0x080049f4
 8004984:	080049fc 	.word	0x080049fc

08004988 <memcpy>:
 8004988:	440a      	add	r2, r1
 800498a:	4291      	cmp	r1, r2
 800498c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004990:	d100      	bne.n	8004994 <memcpy+0xc>
 8004992:	4770      	bx	lr
 8004994:	b510      	push	{r4, lr}
 8004996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800499a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800499e:	4291      	cmp	r1, r2
 80049a0:	d1f9      	bne.n	8004996 <memcpy+0xe>
 80049a2:	bd10      	pop	{r4, pc}

080049a4 <memset>:
 80049a4:	4402      	add	r2, r0
 80049a6:	4603      	mov	r3, r0
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d100      	bne.n	80049ae <memset+0xa>
 80049ac:	4770      	bx	lr
 80049ae:	f803 1b01 	strb.w	r1, [r3], #1
 80049b2:	e7f9      	b.n	80049a8 <memset+0x4>

080049b4 <_init>:
 80049b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b6:	bf00      	nop
 80049b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ba:	bc08      	pop	{r3}
 80049bc:	469e      	mov	lr, r3
 80049be:	4770      	bx	lr

080049c0 <_fini>:
 80049c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c2:	bf00      	nop
 80049c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c6:	bc08      	pop	{r3}
 80049c8:	469e      	mov	lr, r3
 80049ca:	4770      	bx	lr
